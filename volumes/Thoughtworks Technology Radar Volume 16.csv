name,ring,quadrant,isNew,status,description
Pipelines as code,adopt,techniques,FALSE,no change,"<p>Teams are pushing for automation across their environments(testing), including their development infrastructure. <strong>Pipelines as code</strong> is defining the deployment pipeline through code instead of configuring a running CI/CD tool. <a href=""https://www.thoughtworks.com/radar/tools/lambdacd"">LambdaCD</a>, <a href=""http://readme.drone.io/usage/overview/"">Drone</a>, <a href=""https://www.thoughtworks.com/radar/tools/gocd"">GoCD</a> and <a href=""https://www.thoughtworks.com/radar/tools/concourse-ci"">Concourse</a> are examples that allow usage of this technique. Also, configuration automation tools for CI/CD systems like <a href=""https://github.com/SpringerSBM/gomatic"">GoMatic</a> can be used to treat the deployment pipeline as code—versioned and tested.</p>"
APIs as a product,trial,techniques,FALSE,no change,"<p>Companies have wholeheartedly embraced APIs as a way to expose business capabilities to both external and internal developers. APIs promise the ability to experiment quickly with new business ideas by recombining core capabilities. But what differentiates an API from an ordinary enterprise integration service? One difference lies in treating <strong>APIs as a product</strong> , even when the consumer is an internal system or fellow developer. Teams that build APIs should understand the needs of their customers and make the product compelling to them. Usability testing and UX research can lead to a better design and understanding of the API usage patterns and help bring a product mindset to APIs. APIs, like products, should be actively maintained and supported, and, easy to use. They should have an owner who advocates for the customer and strives for continual improvement. In our experience, product orientation is the missing ingredient that makes the difference between ordinary enterprise integration and an agile business built on a platform of APIs.</p>"
Decoupling secret management from source code,trial,techniques,TRUE,new,"<p>In previous Radars issues we mentioned tools such as <a href=""https://www.agwa.name/projects/git-crypt/"">git-crypt</a> and <a href=""https://www.thoughtworks.com/radar/tools/blackbox"">Blackbox</a> that allow us to keep secrets safe inside the source code. <strong>Decoupling secret management from source code</strong> is our way to remind technologists that there are other options for storing secrets. For example, <a href=""https://www.thoughtworks.com/radar/tools/hashicorp-vault"">HashiCorp vault</a>, CI servers and configuration management tools provide mechanisms for storing secrets that are not linked to the source code of an application. Both approaches are viable and we recommend you use at least one of them in your projects.</p>"
Hosting PII data in the EU,trial,techniques,FALSE,no change,"<p>In a number of countries, we see government agencies seeking broad access to private, personally identifiable information (PII). The increased use of public cloud solutions makes it more difficult for organizations to protect the data entrusted to them by their users while also respecting all relevant laws. The European Union has some of the most progressive privacy laws, and all the major cloud providers—Amazon, Google and Microsoft—offer multiple data centers and regions within the European Union. Therefore, we recommend that companies, especially those with a global user base, assess the feasibility of a safe haven for their users' data by <strong>hosting PII data in the EU</strong>. Since we wrote about this technique in the last Radar, we have rolled out a new internal system that handles sensitive information relating to all our employees, and we have chosen to host it in a data center located in the European Union.</p>"
Legacy in a box,trial,techniques,TRUE,new,"<p>Working with legacy code, especially large monoliths, is one of the most unsatisfying, high-friction <a href=""https://thoughtworks.wistia.com/medias/ogq5b8d80y"">experiences for developers</a>. Although we caution against extending and actively maintaining legacy monoliths, they continue to be dependencies in our environments, and developers often underestimate the cost and time required to develop against these dependencies. To help reduce the friction, developers have used virtualized <a href=""https://www.thoughtworks.com/radar/techniques/machine-image-as-a-build-artifact"">machine images</a> or container images with <a href=""https://www.thoughtworks.com/radar/platforms/docker"">Docker</a> containers to create immutable images of legacy systems and their configurations. The intent is to contain the <strong>legacy in a box</strong> for developers to run locally and remove the need for rebuilding, reconfiguring or sharing environments. In an ideal scenario, teams that own legacy systems generate the corresponding boxed legacy images through their build pipelines, and developers can then run and orchestrate these images in their allocated sandbox more reliably. Although this approach has reduced the overall time spent by each developer, it has had limited success when the teams owning the downstream dependencies have been reluctant to create container images for others to use.</p>"
Lightweight Architecture Decision Records,trial,techniques,FALSE,no change,"<p>Although much documentation can be replaced with highly readable code and tests, in a world of <a href=""https://www.thoughtworks.com/radar/techniques/evolutionary-architecture"">evolutionary architecture</a> it's important to record certain design decisions for the benefit of future team members and for external oversight. <strong>Lightweight Architecture Decision Records</strong> is <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">a technique</a> for capturing important architectural decisions along with their context and consequences. Although these items are often stored in a wiki or collaboration tool, we generally prefer <a href=""https://github.com/npryce/adr-tools"">storing them in source control</a> with simple markup.</p>"
Progressive Web Applications,trial,techniques,TRUE,new,"<p>The increase in <strong>Progressive Web Applications</strong> (PWAs) is the latest attempt to bring back the mobile web in response to users' ""app fatigue"". Originally proposed by Google in 2015, PWAs are web applications that take advantage of the latest technologies to combine the best of web and native mobile applications. Using a set of open standard technologies such as, <a href=""https://w3c.github.io/ServiceWorker/"">service workers</a>, the <a href=""https://www.w3.org/TR/appmanifest/"">app manifest</a>, and cache and push APIs, we can create applications that are platform independent and deliver app-like user experiences. This brings parity to web and native applications and helps mobile developers reach users beyond the walled garden of the app stores. Think of PWAs as websites that act and feel like native apps.</p>"
Prototyping with InVision and Sketch,trial,techniques,TRUE,new,"<p>The combined use of InVision and Sketch has changed the way some people approach web application development. Although these are tools, it is really the technique of <strong>prototyping with InVision and Sketch</strong> that makes this blip significant. Creating rich, clickable prototypes as the starting point for implementing front-end and back-end behavior helps speed up the development and eliminates churn in the implementation details. This combined use of these tools strikes the right balance between premature elaboration of visual detail and capturing early user feedback on the interactive experience.</p>"
Serverless architecture,trial,techniques,FALSE,no change,"<p>A <strong><a href=""http://www.martinfowler.com/articles/serverless.html"">serverless architecture</a></strong> approach replaces long-running virtual machines with ephemeral compute power that comes into existence on request and disappears immediately after use. Our teams like the serverless approach; it's working well for us and we consider it a valid architectural choice. Note that serverless doesn't have to be an all-or-nothing approach: some of our teams have deployed a new chunk of their systems using serverless while sticking to a traditional architectural approach for other pieces. Although <a href=""https://www.thoughtworks.com/radar/platforms/aws-lambda"">AWS Lambda</a> is almost synonymous with serverless, the other major cloud providers all have similar offerings, and we also recommend assessing niche players such as <a href=""https://webtask.io/"">webtask</a>.</p>"
Client-directed query,assess,techniques,FALSE,no change,"<p>Although many problems that people encounter with RESTful approaches to APIs can be attributed to the <a href=""https://www.thoughtworks.com/radar/techniques/anemic-rest"">anemic REST</a> antipattern, some use cases warrant exploration of other approaches. In particular, organizations that have to support a long tail of client applications (and thus a likely proliferation of API versions even if they employ <a href=""https://www.thoughtworks.com/radar/techniques/consumer-driven-contract-testing"">consumer-driven contracts</a>)—and have a large portion of their APIs supporting the endless-list style of activity feeds—may hit some limits in RESTful architectures. These can sometimes be mitigated by employing the <strong>client-directed query</strong> approach to client-server interaction. We see this approach being successfully used in both <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/graphql"">GraphQL</a> and <a href=""https://github.com/Netflix/falcor"">Falcor</a>, where clients have more control over both the contents and the granularity of the data returned to them. This does put more responsibility onto the service layer and can still lead to tight coupling to the underlying data model, but the benefits may be worth exploring if well-modeled RESTful APIs aren't working for you.</p>"
Container security scanning,assess,techniques,FALSE,no change,"<p>The container revolution instigated by <a href=""https://www.thoughtworks.com/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments but at the same time has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Docker now provides its own <a href=""https://blog.docker.com/2016/05/docker-security-scanning/"">security scanning tools</a>, as does <a href=""https://coreos.com/blog/vulnerability-analysis-for-containers/"">CoreOS</a>, and we've also had success with the <a href=""https://benchmarks.cisecurity.org/"">CIS Security Benchmarks</a>. Whichever approach you take, we believe the topic of automated container security validation is of high value and a necessary part of PaaS thinking.</p>"
Conversationally aware APIs,assess,techniques,TRUE,new,"<p>Technologies such as <a href=""https://developer.amazon.com/alexa"">Amazon Alexa</a>, <a href=""https://voice.google.com"">Google Voice</a> and Siri have dramatically lowered the bar for voice-based interaction with software. However, a more conversational style of input (voice or text) can be hard to build on top of many existing APIs, especially when it comes to a more stateful style of interaction where a follow-up interaction needs to be aware of the overall conversational context. In this style of interaction, for example, we'd like to inquire about trains from Manchester to Glasgow and then being able to ask ""What time is the first departure?"" without having to give the context of the conversation again. Normally this context would be present in the initial response we send back to a browser, but in the case of voice interfaces we need to handle this context elsewhere. <strong>Conversationally aware APIs</strong> can be an example of the <a href=""https://www.thoughtworks.com/radar/techniques/bff-backend-for-frontends"">backend for front-end pattern</a> where the front-end is a voice or chat platform. This type of API can handle the specifics of this style of interaction by managing conversation states while calling underlying services on behalf of the voice front-end.</p>"
Differential privacy,assess,techniques,FALSE,no change,"<p>It has long been known that ""anonymized"" bulk data sets can reveal information about individuals, especially when multiple data sets are cross-referenced together. With <a href=""https://www.washingtonpost.com/news/the-switch/wp/2016/05/13/new-government-data-shows-a-staggering-number-of-americans-have-stopped-basic-online-activities/"">increasing concern over personal privacy</a>, some companies—including <a href=""https://www.wired.com/2016/06/apples-differential-privacy-collecting-data/"">Apple</a> and <a href=""http://research.google.com/pubs/pub42852.html"">Google</a>—are turning to <strong>differential privacy</strong> techniques in order to improve individual privacy while retaining the ability to perform useful analytics on large numbers of users. Differential privacy is a cryptographic technique that attempts to maximize the accuracy of statistical queries from a database while minimizing the chances of identifying its records. These results can be achieved by introducing a low amount of ""noise"" to the data, but it's important to note that this is an ongoing research area. Apple has announced plans to incorporate differential privacy into its products—and we wholeheartedly applaud its commitment to customers' privacy—but the usual Apple secrecy has left some security experts <a href=""https://blog.cryptographyengineering.com/2016/06/15/what-is-differential-privacy/"">scratching their heads</a>. We continue to recommend <a href=""http://martinfowler.com/bliki/Datensparsamkeit.html"">Datensparsamkeit</a> as an alternative approach: simply storing the minimum data you actually need will achieve better privacy results in most cases.</p>"
Micro frontends,assess,techniques,FALSE,no change,"<p>We've seen significant benefit from introducing <a href=""https://www.thoughtworks.com/radar/techniques/microservices"">microservice architectures</a>, which have allowed teams to scale delivery of independently deployed and maintained services. However, teams have often struggled to avoid the creation of front-end monoliths—large and sprawling browser applications that are as difficult to maintain and evolve as the monolithic server-side applications we've abandoned. We're seeing an approach emerge that our teams call <strong>micro frontends</strong>. In this approach, a web application is broken up by its pages and features, with each feature being owned end-to-end by a single team. Multiple techniques exist to bring the application features—some old and some new—together as a cohesive user experience, but the goal remains to allow each feature to be developed, tested and deployed independently from others. The <a href=""https://www.thoughtworks.com/radar/techniques/bff-backend-for-frontends"">BFF - backend for frontends</a> approach works well here, with each team developing a BFF to support its set of application features.</p>"
Platform engineering product teams,assess,techniques,TRUE,new,"<p>The adoption of cloud and DevOps, while increasing the productivity of teams who can now move more quickly with reduced dependency on centralized operations teams and infrastructure, also has constrained teams who lack the skills to self-manage a full application and operations stack. Some organizations have tackled this challenge by creating <strong>platform engineering product teams</strong>. These teams operate an internal platform which enables delivery teams to self-service deploy and operate systems with reduced lead time and stack complexity. The emphasis here is on API-driven self-service and supporting tools, with delivery teams still responsible for supporting what they deploy onto the platform. Organizations that consider establishing such a platform team should be very cautious not to accidentally create a <a href=""https://www.thoughtworks.com/radar/techniques/separate-devops-team"">separate DevOps team</a>, nor should they simply relabel their <a href=""https://www.thoughtworks.com/radar/platforms/superficial-private-cloud"">existing hosting and operations structure</a> as a platform.</p>"
Social code analysis,assess,techniques,TRUE,new,"<p><strong>Social code analysis</strong> enriches our understanding of the code quality by overlaying a developer's behavior with the structural analysis of the code. It uses data from version control systems, such as frequency and time of the change as well as the person making the change. You can choose to write your own scripts to analyze such data or use tools such as <a href=""http://www.empear.com/"">CodeScene</a>. CodeScene can help you gain a better understanding of your software systems by identifying hotspots and complex, hard-to-maintain subsystems, coupling between distributed subsystems through temporal coupling, as well as the view of Conway's law in your organization. We believe that with technology trends such as distributed systems, microservices and distributed teams the social dimension of our code is vital in our holistic understanding of our systems' health.</p>"
VR beyond gaming,assess,techniques,FALSE,no change,"<p>The idea of virtual reality has been around for more than 50 years, and with successive advancements in computing technology many ideas have been hyped and explored. We believe that we've reached a tipping point. Reasonably affordable consumer-oriented VR headsets were shipped to the market last year, and modern graphics cards provide sufficient power to create immersive experiences with them. The headsets are mainly targeted at video game enthusiasts, but we're convinced that they'll open the doors to many possibilities for <strong>VR beyond gaming</strong>. Teams without experience in building video games should not underestimate the effort and skill required to create good 3-D models and convincing textures.</p>"
A single CI instance for all teams,hold,techniques,FALSE,no change,"<p>We're compelled to caution, again, against creating <strong>a single CI instance for all teams</strong>. While it's a nice idea in theory to consolidate and centralize Continuous Integration (CI) infrastructure, in reality we do not see enough maturity in the tools and products in this space to achieve the desired outcome. Software delivery teams which must use the centralized CI offering regularly have long delays depending on a central team to perform minor configuration tasks, or to troubleshoot problems in the shared infrastructure and tooling. At this stage, we continue to recommend that organizations limit their centralized investment to establishing patterns, guidelines and support for delivery teams to operate their own CI infrastructure.</p>"
Anemic REST,hold,techniques,FALSE,no change,"<p>With the increasing popularity of the <a href=""https://www.thoughtworks.com/radar/techniques/bff-backend-for-frontends"">BFF - Backend for frontends</a> pattern and use of one-way data-binding frameworks like <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React.js</a>, we've noticed a backlash against REST-style architectures. Critics accuse REST of causing chatty, inefficient interactions among systems and failing to adapt as client needs evolve. They offer frameworks such as <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/graphql"">GraphQL</a> or <a href=""https://netflix.github.io/falcor/"">Falcor</a> as alternative data-fetch mechanisms that let the client specify the format of the data returned. But in our experience, it isn't REST that causes these problems. Rather, they stem from a failure to properly model the domain as a set of resources. Naively developing services that simply expose static, hierarchical data models via templated URLs result in an <strong>anemic REST</strong> implementation. In a richly modeled domain, REST should enable more than simple repetitive data fetching. In a fully evolved RESTful architecture, business events and abstract concepts are also modeled as resources, and the implementation should make effective use of hypertext, link relations and media types to maximize decoupling between services. This antipattern is closely related to the <a href=""http://www.martinfowler.com/bliki/AnemicDomainModel.html"">Anemic Domain Model</a> pattern and results in services that rank low in <a href=""http://martinfowler.com/articles/richardsonMaturityModel.html"">Richardson Maturity Model</a>. We have more advice for designing effective REST APIs in our <a href=""https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"">Insights article</a></p><br><br><p>.</p>"
Big Data envy,hold,techniques,FALSE,no change,"<p>We continue to see organizations chasing ""cool"" technologies, taking on unnecessary complexity and risk when a simpler choice would be better. One particular theme is using distributed, Big Data systems for relatively small data sets. This behavior prompts us to put <strong>Big Data envy</strong> on hold once more, with some additional data points from our recent experience. The <a href=""http://cassandra.apache.org/"">Apache Cassandra</a> database promises massive scalability on commodity hardware, but we have seen teams overwhelmed by its architectural and operational complexity. Unless you have data volumes that require a 100+ node cluster, we recommend against using Cassandra. The operational team you'll need to keep the thing running just isn't worth it. While creating this edition of the Radar, we discussed several new database technologies, many offering ""10x"" performance improvements over existing systems. We're always skeptical until new technology—especially something as critical as a database—has been properly proven. <a href=""https://www.thoughtworks.com/radar/tools/jepsen"">Jepsen</a> provides <a href=""http://jepsen.io/analyses.html"">analysis</a> of database performance under difficult conditions and has found <a href=""https://aphyr.com/posts/283-call-me-maybe-redis"">numerous</a> <a href=""https://aphyr.com/posts/284-call-me-maybe-mongodb"">bugs</a> in various NoSQL databases. We recommend maintaining a healthy dose of skepticism and keeping an eye on sites such as Jepsen when you evaluate database tech.</p>"
CI theatre,hold,techniques,TRUE,new,"<p>We've long been advocates of <a href=""https://martinfowler.com/articles/continuousIntegration.html"">continuous integration</a> (CI), and we were <a href=""https://en.wikipedia.org/wiki/CruiseControl"">pioneers</a> in building CI server programs to automatically build projects on check-ins. Used well, these programs run as a daemon process on a <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryoneCommitsToTheMainlineEveryDay"">shared project mainline that developers commit to daily</a>. The CI server <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryCommitShouldBuildTheMainlineOnAnIntegrationMachine"">builds the project</a> and runs <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#MakeYourBuildSelf-testing"">comprehensive tests</a> to ensure the whole software system is integrated and is in an always-releasable state, thus satisfying the principles of <a href=""https://continuousdelivery.com/"">continuous delivery</a>. Sadly, many developers simply set up a CI server and falsely assume they are ""doing CI"" when in reality they miss out on all the benefits. Common failure modes include: running CI against a shared mainline but with infrequent commits, so integration isn't really continuous; running a build with poor test coverage; allowing the build to stay red for long periods; or running CI against feature branches which results in <a href=""http://paulhammant.com/2017/02/14/fake-news-via-continuous-isolation/"">continuous isolation</a>. The ensuing "" <strong>CI theatre</strong>"" might make people feel good, but would fail any credible <a href=""https://martinfowler.com/bliki/ContinuousIntegrationCertification.html"">CI certification test</a>.</p>"
Enterprise-wide integration test environments,hold,techniques,TRUE,new,"<p>When the enterprise-wide quarterly or monthly releases were considered best practice, it was necessary to maintain a complete environment for performing testing cycles prior to deployment to production. These <strong>enterprise-wide integration test environments</strong> (often referred to as SIT or Staging) are a common bottleneck for continuous delivery today. The environments themselves are fragile and expensive to maintain, often with components that need manual configuration by a separate environment management team. Testing in the staging environment provides unreliable and slow feedback, and testing effort is duplicated with what can be performed on components in isolation. We recommend that organizations incrementally create an independent path to production for key components. Important techniques include <a href=""https://www.thoughtworks.com/radar/techniques/consumer-driven-contract-testing"">contract testing</a>, <a href=""https://www.thoughtworks.com/radar/techniques/decoupling-deployment-from-release"">decoupling deployment from release</a>, <a href=""https://www.thoughtworks.com/radar/techniques/focus-on-mean-time-to-recovery"">focus on mean time to recovery</a> and <a href=""https://www.thoughtworks.com/radar/techniques/qa-in-production"">testing in production</a>.</p>"
Spec-based codegen,hold,techniques,TRUE,new,"<p>Back in the days when SOAP held sway in the enterprise software industry, the practice of generating client code from WSDL specs was an accepted—even encouraged—practice. Unfortunately, the resulting code was often complex, untestable, difficult to modify and frequently didn't work across implementation platforms. With the advent of REST, we found it better to evolve API clients that use the <a href=""https://martinfowler.com/bliki/TolerantReader.html"">tolerant reader pattern</a> for extracting and processing only the fields needed. Recently we have observed a disturbing return to old habits with developers generating code from API specifications written in <a href=""https://www.thoughtworks.com/radar/tools/swagger"">Swagger</a> or <a href=""https://www.thoughtworks.com/radar/tools/raml"">RAML</a>—a practice that we refer to as <strong>spec-based codegen</strong>. Although such tools are very useful for driving the design of APIs and for extracting documentation, we caution against the tempting shortcut of simply generating client code directly from these specifications. The chances are that such code will be difficult to test and maintain.</p>"
HSTS,adopt,platforms,FALSE,no change,"<p><a href=""https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"">HTTP Strict Transport Security</a> ( <strong>HSTS</strong> ) is a now widely supported policy that allows websites to protect themselves from downgrade attacks. A downgrade attack in the context of HTTPS is one that can cause users of your site to fall back to HTTP rather than HTTPS, allowing for further attacks such as man-in-the-middle attacks. With HSTS, the server sends a header that informs the browser that it should only use HTTPS to access the website. Browser support is now widespread enough that this easy-to-implement feature should be added to any site using HTTPS. Mozilla's <a href=""https://observatory.mozilla.org/"">Observatory</a> can help identify this and other useful headers and configuration options that improve security and privacy. When implementing HSTS, it is critical to verify that all resources load properly over HTTPS, because once HSTS is turned on, there is (almost) no turning back until the expiry time. The directive to include subdomains should be added but, again, a thorough verification that all subdomains support secure transport is required.</p>"
Linux Security Modules,adopt,platforms,FALSE,no change,"<p>The Principle of Least Privilege encourages us to restrict software components to access only the resources that they need. By default, however, a Linux process can do anything its running user can do—from binding to arbitrary ports to spawning new shells. The <strong><a href=""https://www.kernel.org/doc/Documentation/security/LSM.txt"">Linux Security Modules</a></strong> (LSM) framework, which allows for security extensions to be plugged into the kernel, has been used to implement MAC on Linux. SELinux and AppArmor are the predominant and best-known LSM-compatible implementations that ship with the kernel. We recommend that teams learn to use one of these security frameworks (which is why we placed it in the Adopt ring). They help teams assess questions about who has access to what resources on shared hosts, including contained services. This conservative approach to access management will help teams build security into their SDLC processes.</p>"
Apache Mesos,trial,platforms,FALSE,no change,"<p>We've continued to have positive experiences deploying the <strong><a href=""http://mesos.apache.org/"">Apache Mesos</a></strong> platform to manage cluster resources for highly distributed systems. Mesos abstracts out underlying computing resources such as CPU and storage, aiming to provide efficient utilization while maintaining isolation. Mesos includes <a href=""https://mesos.github.io/chronos/"">Chronos</a> for distributed and fault-tolerant execution of scheduled jobs, and <a href=""https://mesosphere.github.io/marathon/"">Marathon</a> for orchestrating long-running processes in containers.</p>"
Auth0,trial,platforms,FALSE,no change,"<p>We have a growing belief that for most scenarios it is rarely worth rolling your own authentication code. Outsourced identity management speeds up delivery, reduces mistakes and tends to enable a faster response to newly discovered vulnerabilities. <strong><a href=""https://auth0.com/"">Auth0</a></strong> has particularly impressed us in this field for its ease of integration, range of protocols and connectors supported, and rich management API.</p>"
AWS Device Farm,trial,platforms,TRUE,new,"<p>The huge number of mobile devices makes it almost impossible for companies to test their mobile apps on all of them. Enter <strong><a href=""https://aws.amazon.com/device-farm/"">AWS Device Farm</a></strong>, an app-testing service that enables you to run and interact with your Android, iOS and web apps on a wide variety of physical devices that are hosted in the cloud simultaneously. Detailed logs, performance graphs and screenshots are generated during each run to provide general and device-specific feedback. The service offers a lot of flexibility by allowing the state and configuration of each device to be altered in order to reproduce very specific test scenarios. Our teams are using AWS Device Farm to run end-to-end tests on devices with the largest install base for their apps.</p>"
AWS Lambda,trial,platforms,FALSE,no change,"<p>Our teams continue to enjoy using <strong><a href=""https://aws.amazon.com/lambda/"">AWS Lambda</a></strong> and are beginning to use it to experiment with <a href=""https://www.thoughtworks.com/radar/techniques/serverless-architecture"">serverless architectures</a>, combining Lambda with the <a href=""https://www.thoughtworks.com/radar/platforms/amazon-api-gateway"">API Gateway</a>. We do recommend that Lambda functions contain only a moderate amount of code. Ensuring the quality of a solution based on a tangle of many large Lambda functions is difficult, and such a solution may not be cost-effective. For more complex needs, deployments based on containers or VMs are still preferable. In addition, we have run into significant problems using Java for Lambda functions, with erratic latencies up to several seconds as the Lambda container is started. Of course, you can sidestep this issue by using JavaScript or Python, and if Lambda functions do not contain a lot of code, the choice of programming language should not matter too much.</p>"
OpenTelemetry,trial,platforms,TRUE,new,"<p>As monolithic applications are being replaced with more complex <a href=""https://www.thoughtworks.com/radar/techniques/microservices"">(micro)service</a> ecosystems, tracing requests across multiple services is becoming the norm. With majority contribution from LightStep and Uber <a href=""http://opentracing.io/""><strong>OpenTracing</strong></a> is rapidly becoming the de facto standard for distributed tracing. There is a growing number of <a href=""http://opentracing.io/documentation/pages/supported-tracers"">tracers</a> supporting OpenTracing standard, including <a href=""https://www.thoughtworks.com/radar/tools/zipkin"">Zipkin</a>, <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/instana"">Instana</a>, and <a href=""https://uber.github.io/jaeger/"">Jaeger</a>. OpenTracing currently provides vendor-neutral implementation in multiple languages including: Go, JavaScript, Java, Python, Objective-C, C#, C++, Ruby and PHP.</p>"
Unity beyond gaming,trial,platforms,FALSE,no change,"<p>After experiencing years of growth as a platform for game development, <strong><a href=""https://unity3d.com/"">Unity</a></strong> has recently become the platform of choice for VR and AR application development. Whether you're creating a fully immersive world for the Oculus or HTC Vive headsets, a holographic layer for your newly spatial enterprise application or an AR feature set for your mobile app, Unity likely provides what you need to both prototype it and get it ready for prime time. Many of us at ThoughtWorks believe that VR and AR represent the next significant shift in the computing platform, and for now, Unity is the single most important tool in the toolbox we use to develop for this change. We've used Unity to develop all our VR prototypes, as well as AR functionality for headsets and phone/tablet applications.</p>"
.NET Core,assess,platforms,FALSE,no change,"<p><strong><a href=""https://www.microsoft.com/net/core"">.NET Core</a></strong> is an open source modular product for creating applications that can be easily deployed in Windows, macOS and Linux. .NET Core makes it possible to build cross-platform web applications using <a href=""http://www.asp.net/core"">ASP.NET Core</a> with a set of tools, libraries and frameworks—another choice for microservices architecture. The community around .NET Core and other related projects has been growing. New tools have appeared and evolved quickly, such as <a href=""https://www.thoughtworks.com/radar/tools/visual-studio-code"">Visual Studio Code</a>. There are <a href=""https://www.thoughtworks.com/radar/platforms/docker"">Docker</a> <a href=""https://www.microsoft.com/net/core#docker"">images</a> based on both Linux and Windows (<a href=""https://www.thoughtworks.com/radar/platforms/microsoft-nano-server"">Nano Server</a>) with .NET Core that simplify applying a microservice architecture. CoreCLR and CoreFX appeared in the Radar in the past. However, a few months ago Microsoft <a href=""https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0"">announced</a> the release of .NET Core 1.0, the first stable version. We see good new opportunities, changes and a vibrant community as reasons to keep assessing this product.</p>"
Amazon API Gateway,assess,platforms,FALSE,no change,"<p><a href=""https://aws.amazon.com/api-gateway/""><strong>Amazon API Gateway</strong></a> enables developers to expose API services to Internet clients. It offers the usual API gateway features including traffic management, monitoring, authentication and authorization. Our teams have had positive experiences using this service to front <a href=""https://www.thoughtworks.com/radar/platforms/aws-lambda"">AWS Lambda</a> as part of <a href=""https://www.thoughtworks.com/radar/techniques/serverless-architecture"">serverless architectures</a>. On the other hand, we have had more challenges using it as a more general purpose gateway to front HTTP/HTTPS endpoints running on EC2—where we have been stymied by a lack of interoperability with VPCs and difficulty in establishing client cert authentication with the gateway. Due to this mixed experience, we would like to advise teams to trial using AWS API Gateway with Lambda but assess suitability when using it in a more general setting.</p>"
Cassandra carefully,assess,platforms,FALSE,no change,"<p>Apache's <a href=""http://cassandra.apache.org/"">Cassandra</a> database is a powerful, scalable Big Data solution for storing and processing large amounts of data, often using hundreds of nodes split over multiple worldwide locations. It's a great tool and we like it, but too often we see teams run into trouble using it. We recommend using <strong>Cassandra carefully</strong>. Teams often misunderstand the use case for Cassandra, attempting to use it as a general-purpose data store when in fact it is optimized for fast reads on large data sets based on predefined keys or indexes. Its dependence on the storage schema can also make it difficult to evolve over time. Cassandra also has significant operational complexity and some rough edges, so unless you absolutely need the scaling it provides, a simpler solution is usually better. If you don't need Cassandra's specific use-case and scaling characteristics, you might just be choosing it out of <a href=""https://www.thoughtworks.com/radar/techniques/big-data-envy"">Big Data envy</a>. Careful use of Cassandra will include extensive automated testing, and we're happy to recommend <a href=""https://github.com/jsevellec/cassandra-unit"">CassandraUnit</a> as part of your testing strategy.</p>"
Cloud-based image comprehension,assess,platforms,TRUE,new,"<p>Image comprehension used to be a dark art and required a team of onsite data scientists. In recent years, however, we've come closer to solving problems such as image and facial classification/categorization, facial comparisons, facial landmark identification, and facial recognition. <strong>Cloud-based image comprehension</strong> provides access to machine-learning capabilities through services such as <a href=""https://aws.amazon.com/rekognition/"">Amazon</a><a href=""https://aws.amazon.com/rekognition/"">Rekognition</a>, <a href=""https://www.microsoft.com/cognitive-services/en-us/computer-vision-api"">Microsoft Computer Vision API</a> and <a href=""https://cloud.google.com/vision/"">Google Cloud Vision API</a> which can supplement AR applications and anything involving photo tagging and classification.</p>"
DataStax Enterprise Graph,assess,platforms,TRUE,new,"<p>We've had some early successes with <a href=""http://www.datastax.com/products/datastax-enterprise-graph""><strong>DataStax Enterprise Graph</strong></a> (DSE Graph) for handling large graph databases. Built on top of <a href=""https://www.thoughtworks.com/radar/platforms/cassandra-carefully"">Cassandra</a>, DSE Graph targets the type of large data sets where our longtime favorite <a href=""https://www.thoughtworks.com/radar/platforms/neo4j"">Neo4j</a> begins to show some limitations. This scale has its trade-offs; for example, you lose the ACID transactions and run-time schema-free nature of Neo4j, but access to the underlying Cassandra tables, the integration of Spark for analytical workloads, and the powerful <a href=""http://tinkerpop.apache.org/"">TinkerPop/Gremlin</a> query language make this an option worth considering.</p>"
DialogFlow,assess,platforms,TRUE,new,"<p>In parallel with the recent surge of chatbots and <a href=""https://www.thoughtworks.com/radar/platforms/voice-platforms"">voice platforms</a>, we've seen a proliferation of tools and platforms such as <strong><a href=""https://api.ai/"">api.ai</a></strong> that provide a service to extract intent from text and management of conversational flow that you can hook into. Recently acquired by Google, this ""natural-language-understanding as a service"" offering competes with other players in this space such as <a href=""https://www.thoughtworks.com/radar/platforms/wit-ai"">wit.ai</a> and Amazon's <a href=""https://aws.amazon.com/lex/"">Lex</a>.</p>"
Electron,assess,platforms,FALSE,no change,"<p><strong><a href=""http://electron.atom.io/"">Electron</a></strong> is a solid framework for building native desktop clients using web technologies such as HTML, CSS and JavaScript. Teams can leverage their web know-how to deliver polished cross-platform desktop clients without spending time learning another set of technologies.</p>"
Ethereum,assess,platforms,FALSE,no change,"<p>The hype seems to have peaked for blockchains and cryptocurrencies, as evidenced by the slowdown of previous firehose-scale announcements in this area, and we expect some of the more speculative efforts to die out over time. One of the blockchains, <a href=""https://www.ethereum.org/""><strong>Ethereum</strong></a>, while not universally popular among diehard blockchain aficionados, appears in increasing numbers in new initiatives. Ethereum is a public blockchain with a built-in programming language allowing developers to build ""smart contracts"", which are algorithmic movements of ether (the Ethereum cryptocurrency) in response to activity happening on the blockchain. R3CEV, the consortium building blockchain tech for banks, built its first proofs of concept on Ethereum. Ethereum has been used to build a distributed autonomous organization (DAO)—one of the first ""algorithmic corporations""—although a recent heist of <a href=""http://www.coindesk.com/dao-attacked-code-issue-leads-60-million-ether-theft/"">$150 million in the ether</a> demonstrates that the blockchains and cryptocurrencies are still the Wild West of the technology world.</p>"
Hyperledger,assess,platforms,TRUE,new,"<p><strong>Hyperledger</strong> is a platform built around blockchain technologies. It consists of a blockchain implementation named Fabric and other associated tools. Disregarding the hype surrounding blockchain, our teams have found it easy to get started with these tools. The fact that it is an open source platform supported by the Linux Foundation also adds to our excitement about Hyperledger.</p>"
IndiaStack,assess,platforms,FALSE,no change,"<p><strong><a href=""http://www.indiastack.org"">IndiaStack</a></strong> is a set of Open APIs designed with the goal of transforming India from a data-poor to a data-rich country. The stack emphasizes layered innovation by specifying a minimal set of APIs and encourages the rest of the ecosystem to build custom applications on top of these APIs. <a href=""http://www.indiastack.org/Resource#Aadhaar"">Aadhaar</a> serves as one of the foundation layers, providing authentication services for more than a billion Indian citizens. In addition, there are services to provide paperless transactions through digital signatures (eSign), unified online payment (UPI) and an electronic consent layer ((e-KYC)[https://uidai.gov.in/ecosystem/authentication-devices-documents/about-aadhaar-paperless-offline-e-kyc.html]) to securely provide Aadhaar details to service providers. We believe in the Open API–driven initiative to bring digital innovation, and the design principles behind IndiaStack could be used as a change agent for other regions/countries.</p>"
Kafka Streams,assess,platforms,TRUE,new,"<p><strong>Kafka Streams</strong> is a lightweight library for building streaming applications. It's been designed with the goal of simplifying stream processing enough to make it easily accessible as a mainstream application programming model for asynchronous services. It can be a good alternative in scenarios where you want to apply a stream processing model to your problem without embracing the complexity of running a cluster (usually introduced by full-fledged stream processing frameworks).</p>"
Keycloak,assess,platforms,TRUE,new,"<p>In a <a href=""https://www.thoughtworks.com/radar/techniques/microservices"">microservices</a> or any other distributed architecture, one of the most common needs is to secure the services or APIs through authentication and authorization features. This is where <strong><a href=""http://www.keycloak.org/"">Keycloak</a></strong> comes in. Keycloak is an open source identity and access management solution that makes it easy to secure applications or microservices with little to no code. Out of the box, it supports single sign-on, social login, and standard protocols such as OpenID Connect, OAuth2 and SAML.</p>"
Mesosphere DCOS,assess,platforms,FALSE,no change,"<p><strong><a href=""https://mesosphere.com/product/"">Mesosphere DCOS</a></strong> is a platform built on top of <a href=""https://www.thoughtworks.com/radar/platforms/apache-mesos"">Mesos</a> that abstracts away your underlying infrastructure for containerized applications as well as for applications you don't want to run inside Docker. This may be overkill for more modest deployments, but we're beginning to see successes with both the commercial and <a href=""https://dcos.io/"">open source versions</a>. We particularly like that it facilitates portability between different cloud providers as well as dedicated hardware, and that for containerized workloads you're not tied into one container orchestration framework. Although upgrades can be a little more complex than we would like, the overall stack is stabilizing nicely.</p>"
Mosquitto,assess,platforms,TRUE,new,"<p>In our experience—for Internet of Things (IoT) solutions where a lot of devices communicate with each other and/or a central data hub—the MQTT connectivity protocol has proven itself. We've also come to like the <strong><a href=""http://mosquitto.org/"">Mosquitto</a></strong> MQTT broker. It might not satisfy all demands, particularly with regard to scalability, but its compact nature and easy setup makes it ideal for development and testing purposes.</p>"
Nuance Mix,assess,platforms,FALSE,no change,"<p><strong><a href=""https://developer.nuance.com/public/index.php?task=mix"">Nuance Mix</a></strong> is a framework for natural language processing from the company that created the speech-to-text technology behind Dragon Speaking and the first roll-out of Siri. This framework supports the creation of grammars that allow for free-form user interaction via voice. The developer defines a domain-specific grammar that the framework can train itself to understand. The outcomes are responses to user input that identify the user's intents and interaction concepts. At first, it is limited to phrases close to the ones used to train it, but over time it can start to identify meaning from more divergent phrasing. Though it is still in beta, the accuracy from early exploration has been compelling, and the eventual product is one to watch for application forms that could benefit from hands-free user interaction—including mobile, IoT, AR, VR and interactive spaces.</p>"
OpenVR,assess,platforms,FALSE,no change,"<p><strong><a href=""https://github.com/ValveSoftware/openvr"">OpenVR</a></strong> is the underlying SDK in making many of the VR head-mounted displays (HMDs) work with Unity and will likely keep growing in importance. Much of the VR work at ThoughtWorks was built on top of OpenVR, because it will run on any HMD, unlike the other SDKs. Though it is not open source, it is free via the license. The Oculus SDK is more restrictive in its licensing and only works on Oculus devices. <a href=""https://osvr.github.io/"">OSVR</a>, while truly open source, doesn't seem to have as much adoption yet. If you're going to develop a VR application and target as many devices as possible—and not use Unity or Unreal to develop them—OpenVR is the most concrete and pragmatic solution right now.</p>"
PlatformIO,assess,platforms,TRUE,new,"<p><strong><a href=""http://platformio.org/"">PlatformIO</a></strong> provides a rich ecosystem for IoT development by providing cross-platform builds, library management and good integration with existing IDEs. The intelligent code completion and Smart Code Linter with built-in terminal and serial port monitor greatly enhances the developer experience. It also organizes and maintains <a href=""http://platformio.org/lib"">thousands of libraries</a> and provides a clean dependency manager with semantic versioning to ease IoT development. We've started using PlatformIO in a few IoT projects and we really like it for its simplicity and wide support of <a href=""http://platformio.org/platforms"">platforms</a> and <a href=""http://platformio.org/boards"">boards</a>.</p>"
Tango,assess,platforms,TRUE,new,"<p>Alongside virtual reality (VR), which has a relatively high bar to entry due to hardware requirements and the effort to create virtual worlds, alternate reality (AR) and mixed reality (MR) also entered into the mainstream last year. Pokémon Go provided evidence that regular smartphones are sufficient to create compelling AR/MR experiences. <strong><a href=""https://en.wikipedia.org/wiki/Tango_(platform)"">Tango</a></strong> is a new hardware sensor technology for mobile phones that further enhances the possibilities for AR/MR on phones. It allows apps to acquire detailed 3-D measurements of the user's surroundings so that virtual objects can be placed and rendered more convincingly on the camera feed. The first phones with Tango technology are now available.</p>"
Voice platforms,assess,platforms,TRUE,new,"<p><strong>Voice platforms</strong> such as <a href=""https://developer.amazon.com/alexa"">Amazon Alexa</a> and <a href=""https://developers.google.com/actions/"">Google Home</a> are riding high on the hype cycle; some even herald the ubiquity of the conversational voice interface. We're already integrating conversational UIs into products and seeing the impact of this new interaction in how we design interfaces. Alexa specifically was built from the ground up without a screen and treats the conversational UI as first-class. But it's still too early to believe the hype, and we expect more big players to get in the game.</p>"
WebVR,assess,platforms,TRUE,new,"<p><strong><a href=""https://webvr.info/"">WebVR</a></strong> is an experimental JavaScript API that enables you to access VR devices through your browser. It has garnered support from the community and is available through nightly builds as well as in some release versions. If you are looking to build VR experiences in your browser, then this is a great place to start. This technology alongside complementary tools such <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/three-js"">Three.js</a>, <a href=""https://aframe.io/"">A-Frame</a>, <a href=""https://github.com/facebookincubator/react-vr"">ReactVR</a>, <a href=""https://github.com/argonjs/argon"">Argon.js</a> and <a href=""https://github.com/awe-media/awe.js"">Awe.js</a> brings AR experiences to the browser. The flurry of tools in this space, alongside Internet commission standards, could help promote stronger adoption of AR and VR.</p>"
wit.ai,assess,platforms,FALSE,no change,"<p>Hype surrounding machine intelligence has reached a crescendo, but as with Big Data, useful frameworks and tools are waiting to be discovered among all the hot air. One such tool is <a href=""https://wit.ai/""><strong>wit.ai</strong></a>, a SaaS platform that allows developers to create conversational interfaces using natural language processing (NLP). Wit works with either text or speech inputs, helps developers manage conversational intent and allows custom business logic to be implemented using JavaScript. The system is free for commercial and noncommercial use and encourages the creation of open applications. Be aware that you must agree to let Wit use your data in order to improve the service and for its own analysis, so read the <a href=""https://wit.ai/terms"">terms and conditions</a> carefully. Another contender in this space is the <a href=""https://dev.botframework.com/"">Microsoft Bot Framework</a>, but it's available only in limited preview form as of this writing. As with most things Microsoft, we expect the Bot Framework to evolve quickly, so it's worth keeping an eye on.</p>"
CMS as a platform,hold,platforms,FALSE,no change,"<p>We are seeing too many organizations run into trouble as they attempt to use their <strong>CMS as a platform</strong> for delivering large and complex digital applications. This is often driven by the vendor-fueled hope of bypassing unresponsive IT organizations and enabling the business to drag and drop changes directly to production. While we are very supportive of providing content producers with the right tools and workflows, for applications with complex business logic we tend to recommend treating your CMS as a component of your platform (often in a hybrid or headless mode) cooperating cleanly with other services, rather than attempting to implement all of your functionality in the CMS itself.</p>"
Overambitious API gateways,hold,platforms,FALSE,no change,"<p>One of our regular complaints is about business smarts implemented in middleware, resulting in transport software with ambitions to run critical application logic. Vendors in the highly competitive API gateway market continue to add features that differentiate their products. This results in <strong>overambitious API gateway</strong> products whose functionality—on top of what is essentially a reverse proxy—encourages designs that are difficult to test and deploy. API gateways can provide utility in dealing with some generic concerns—for example, authentication and rate-limiting—but any domain smarts such as data transformation or rule processing should live in applications or services where they can be controlled by product teams working closely with the domains they support.</p>"
fastlane,adopt,tools,FALSE,moved in,"<p>Web application developers have it easy when it comes to simplifying and automating diverse application workflows; they can choose from a variety of solutions to help automate release processes. When developing for mobile, however, we're dealing with two operating systems with two different ways of building, testing, distribution, generating screenshots, signing and distributing applications. To help ease the pain, our teams have adopted <strong><a href=""https://fastlane.tools/"">fastlane</a></strong> as the go-to tool to automate the release process for iOS and Android applications. Using simple configurations and multiple pipelines, they can achieve <a href=""https://www.thoughtworks.com/radar/techniques/continuous-delivery-cd"">continuous delivery</a> for mobile development.</p>"
Grafana,adopt,tools,FALSE,no change,"<p>When combining modern techniques and architecture styles, such as <a href=""https://www.thoughtworks.com/radar/techniques/microservices"">microservices</a>, <a href=""https://www.thoughtworks.com/radar/techniques/devops"">DevOps</a> and <a href=""https://www.thoughtworks.com/radar/techniques/qa-in-production"">QA in production</a>, development teams need increasingly sophisticated monitoring. Simply looking a graphs of disk usage and CPU utilization is not sufficient anymore, and many teams collect application and business-specific metrics using tools such a Graphite and Kibana. <strong><a href=""http://grafana.org/"">Grafana</a></strong> makes it easy to create useful and elegant dashboards for data from a number of sources. A particularly useful feature allows timescales of different graphs to be synchronized, which helps with spotting correlations in the underlying data. The templating system that is being added shows a lot promise and will likely make managing sets of similar services even easier. Based on its strengths, Grafana has become our default choice in this category.</p>"
Airflow,trial,tools,TRUE,new,"<p><strong><a href=""https://airflow.incubator.apache.org/"">Airflow</a></strong> is a tool to programmatically create, schedule and monitor data pipelines. By treating Directed Acyclic Graphs (DAGs) as code, it encourages maintainable, versionable and testable data pipelines. We've leveraged this configuration in our projects to create dynamic pipelines that resulted in lean and explicit data workflows. Airflow makes it easy to define your operators and executors and to extend the library so that it fits the level of abstraction that suits your environment.</p>"
Cake and Fake,trial,tools,TRUE,new,"<p>MSBuild has been the primary build system in the .NET ecosystem since its introduction in 2005; however, it suffers from many of the same weaknesses we've previously called out in <a href=""https://www.thoughtworks.com/radar/tools/maven"">Maven</a>. The .NET community has started to develop alternatives to MSBuild which are easier to maintain and more flexible, and evolve more fluidly as a project grows. Two of these alternatives are <strong><a href=""http://cakebuild.net/"">Cake</a> and <a href=""https://fake.build/"">Fake</a></strong>. Cake uses a DSL built in C#, while Fake uses F#. Each has seen significant growth over the last year and has proven to be a viable alternative to MSBuild for orchestrating common build tasks in .NET projects.</p>"
Galen,trial,tools,FALSE,no change,"<p>Testing that layout and styling of responsive websites is working as expected across various form factors can be a slow and often manual process. <strong><a href=""http://galenframework.com/"">Galen</a></strong> helps ease this problem by providing a simple language, running on top of <a href=""http://www.seleniumhq.org/"">Selenium</a>, that allows you to specify expectations for the appearance of your website in various screen sizes. Although Galen suffers from the typical brittleness and speed issues of any end-to-end testing approach, we have found benefit in the early feedback on design issues.</p>"
HashiCorp Vault,trial,tools,FALSE,no change,"<p>Having a way to securely manage secrets is increasingly becoming a huge project issue. The old practice of keeping secrets in a file or in environment variables is becoming hard to manage, especially in environments with multiple applications and large numbers of <a href=""https://www.thoughtworks.com/radar/techniques/microservices"">microservices</a>. <a href=""https://github.com/hashicorp/vault""><strong>HashiCorp Vault</strong></a> addresses the problem by providing mechanisms for securely accessing secrets through a unified interface. It has served us well on a number of projects, and our teams liked how easy it was to integrate Vault with their services. Storing and updating secrets is a bit cumbersome, because it relies on a command-line tool and a fair amount of discipline from the team.</p>"
Pa11y,trial,tools,FALSE,no change,"<p><a href=""http://pa11y.org/""><strong>Pa11y</strong></a> is an automatic accessibility tester that can run from the command line and be embedded into a build pipeline. Our teams have had success using Pa11y on a highly dynamic site by first creating a static HTML version, then running the accessibility tests against that. For many systems—especially government websites—accessibility testing is a requirement, and Pa11y makes it all a lot easier.</p>"
Scikit-learn,trial,tools,FALSE,moved in,"<p><strong><a href=""http://scikit-learn.org/stable/"">Scikit-learn</a></strong> is not a new tool (it is approaching its tenth birthday); what is new is the rate of adoption of machine-learning tools and techniques outside of academia and major tech companies. Providing a robust set of models and a rich set of functionality, Scikit-learn plays an important role in making machine-learning concepts and capabilities more accessible to a broader (and often non-expert) audience.</p>"
Serverless Framework,trial,tools,TRUE,new,"<p>The popular <strong><a href=""https://serverless.com/"">Serverless Framework</a></strong> provides tooling for scaffolding and deployment of serverless applications, primarily using <a href=""https://www.thoughtworks.com/radar/platforms/aws-lambda"">AWS Lambda</a> and other AWS offerings. Serverless Framework provides template support for JavaScript, Python, Java and C#, and has an active community that contributes plugins that extend the framework. The framework also supports the Apache incubator project OpenWhisk as an alternative to AWS Lambda.</p>"
Talisman,trial,tools,FALSE,no change,"<p>With the maturity of tools such as <a href=""https://www.thoughtworks.com/radar/tools/hashicorp-vault"">Vault</a>, there is no longer an excuse for storing secrets in code repositories, particularly since this often ends up being the soft underbelly of important systems. We've previously mentioned repository-scanning tools such as <a href=""https://www.thoughtworks.com/radar/tools/gitrob"">Gitrob</a>, but we are now pushing proactive tools such as (the ThoughtWorks-created) <strong><a href=""https://github.com/thoughtworks/talisman"">Talisman</a></strong>, which is a prepush hook for Git that scans commits for secrets matching predefined patterns.</p>"
Terraform,trial,tools,FALSE,no change,"<p>With <strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, you can manage cloud infrastructure by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to tools like Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""https://www.thoughtworks.com/radar/tools/consul"">Consul</a> for that purpose.</p>"
Amazon Rekognition,assess,tools,TRUE,new,"<p><strong><a href=""https://aws.amazon.com/rekognition/"">Amazon Rekognition</a></strong> is one of the cloud-based image comprehension tools we've mentioned elsewhere in this Radar. What we like about it is that Amazon has taken a somewhat novel approach to making faces anonymous (using GUIDs) from AWS to accommodate some of the privacy concerns that come with facial recognition.</p>"
Android-x86,assess,tools,FALSE,no change,"<p><strong><a href=""http://www.android-x86.org/"">Android-x86</a></strong> is a port of the <a href=""http://source.android.com/"">Android open source</a> project to x86 platforms. The project started by hosting various patches from the community for x86 support but then later created its own codebase to provide support for different x86 platforms. We have seen significant time savings by utilizing Android-x86 in our CI servers instead of emulators for hermetic UI testing. However, for UI-specific tests targeting a particular device resolution—simulating low memory, bandwidth and battery—it is better to stick with emulators.</p>"
Bottled Water,assess,tools,FALSE,no change,"<p>With the growth of interest in streaming data architectures and the downstream data lakes they feed, we have seen an increased reliance on ""change data capture"" tooling to connect transactional data stores to stream-processing systems. <strong><a href=""https://github.com/confluentinc/bottledwater-pg"">Bottled Water</a></strong> is a welcome addition to this field, converting changes in <a href=""https://www.thoughtworks.com/radar/platforms/postgresql-for-nosql"">PostgreSQL</a>'s write-ahead log into <a href=""https://www.thoughtworks.com/radar/tools/apache-kafka"">Kafka</a> events. One downside of this approach, however, is that you are tied to low-level database events rather than the higher-level <a href=""https://www.thoughtworks.com/radar/techniques/capture-domain-events-explicitly"">business events</a> we recommend as the foundation for an event-oriented architecture.</p>"
Claudia,assess,tools,TRUE,new,"<p>The combination of <a href=""https://www.thoughtworks.com/radar/platforms/aws-lambda"">AWS Lambda</a> with <a href=""https://www.thoughtworks.com/radar/platforms/amazon-api-gateway"">Amazon API Gateway</a> has had a big impact on how we deploy services and APIs. However, even in this serverless configuration, the amount of configuration required to wire things together is not trivial. <strong><a href=""https://claudiajs.com/"">Claudia</a></strong> is a tool which automates deployment of AWS Lambda functions written in JavaScript and associated API Gateway configurations. It provides reasonable defaults, and our teams have found it allows them to get started quickly with Lambda-based microservices.</p>"
Clojure.spec,assess,tools,FALSE,no change,"<p>One of those perpetual developer debates involves language typing: How much is just right? <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/clojure"">Clojure</a>, the dynamically typed functional Lisp on the JVM, added a new entry into this discussion that blurs the lines. <strong><a href=""https://clojure.org/about/spec"">Clojure.spec</a></strong> is a new facility built into Clojure that allows developers to wrap type and other verification criteria around data structures, such as allowable value ranges. Once they are established, Clojure uses these specifications to provide a slew of benefits: generated tests, validation, destructuring of data structures and others. Clojure.spec is a promising way to have the benefits of types and ranges where developers need them but not everywhere.</p>"
InSpec,assess,tools,TRUE,new,"<p>How does a business hand autonomy to delivery teams while still making sure their deployed solutions are safe and compliant? How do you ensure that servers, once deployed, remain secure and compliant over their operational lifetime? These are the problems that <strong>InSpec</strong> tries to address. InSpec is an infrastructure testing tool inspired by <a href=""https://www.thoughtworks.com/radar/tools/serverspec"">Serverspec</a>, but with modifications that make the tool more useful for security professionals who need to ensure compliance across thousands of servers. Individual tests can be combined into complete security profiles and run remotely from a command line. InSpec is useful for developers but extends to testing deployed production infrastructure continuously, moving toward <a href=""https://www.thoughtworks.com/radar/techniques/qa-in-production"">QA in production</a>.</p>"
Molecule,assess,tools,TRUE,new,"<p><strong><a href=""https://github.com/metacloud/molecule"">Molecule</a></strong> is designed to aid in the development and testing of <a href=""https://www.thoughtworks.com/radar/tools/ansible"">Ansible</a> roles. By building the scaffolding for running Ansible role tests on a virtual machine or container of choice, we don't have to setup our testing environment manually. Molecule leverages <a href=""https://www.thoughtworks.com/radar/tools/vagrant"">Vagrant</a>, <a href=""https://www.thoughtworks.com/radar/platforms/docker"">Docker</a>, and <a href=""https://www.thoughtworks.com/radar/platforms/openstack"">OpenStack</a> to manage virtual machines or containers, and supports <a href=""https://www.thoughtworks.com/radar/tools/serverspec"">Serverspec</a>, <a href=""https://www.thoughtworks.com/radar/tools/testinfra"">Testinfra</a>, or <a href=""https://github.com/aelsabbahy/goss"">Goss</a> to run the tests. The default steps in the sequence facility model include: virtual machine management, Ansible linting, idempotence testing and convergence testing. Although it is a fairly young project, we see a great potential for its usage.</p>"
Spacemacs,assess,tools,TRUE,new,"<p>As any Emacs fan will tell you, Emacs is more than a text editor; it is a platform for character-mapped applications. Over the past few years, there has been an explosion of new developments on this platform, but we think <strong><a href=""https://www.spacemacs.org/"">Spacemacs</a></strong> deserves particular attention. Spacemacs provides an introduction to the Emacs platform, with a new keyboard user-interface, simplified customization layers, and a curated distribution of Emacs packages. One of the project's aims is to be the best of worlds by combining the Vim UI with the <a href=""https://martinfowler.com/bliki/InternalReprogrammability.html"">internal reprogrammability</a> of Emacs. We consider developer productivity tools to be a vital part of effective software development, and if you haven't considered Emacs for a while, we suggest you take a look at how Spacemacs rethinks this classic development platform.</p>"
spaCy,assess,tools,TRUE,new,"<p><a href=""https://spacy.io/""><strong>spaCy</strong></a> is a Natural Language Processing (NLP) library written in Python. It is a high-performance library, intended for use by developers in production, and applies NLP models suited for processing text that often mixes in emoticons and inconsistent punctuation marks. Unlike other NLP frameworks, spaCy is a pluggable library and not a platform; it is aimed at production applications rather than model training for research. It plays well with <a href=""https://www.thoughtworks.com/radar/platforms/tensorflow"">TensorFlow</a> and the rest of the Python AI ecosystem. We've used spaCy in the enterprise context to build a search engine that takes human language queries and helps users make business decisions.</p>"
Spinnaker,assess,tools,TRUE,new,"<p><a href=""http://techblog.netflix.com/2015/11/global-continuous-delivery-with.html"">Netflix</a> has open sourced <a href=""http://www.spinnaker.io/""><strong>Spinnaker</strong></a>, its microservices continuous delivery (CD) platform. Compared to other CI/CD platforms, Spinnaker implements cluster management and deployment of baked images to the cloud as first-class features. It supports out-of-the-box deployment and cluster management for multiple cloud providers such as Google Cloud Platform, AWS and <a href=""https://www.thoughtworks.com/radar/platforms/pivotal-cloud-foundry"">Pivotal Cloud Foundry</a>. You can integrate Spinnaker with Jenkins to run a Jenkins job build. We like Spinnaker's opinionated approach for deploying microservices to the cloud—with the exception that Spinnaker's pipelines are created via a user interface (UI) and cannot be configured as code.</p>"
Testinfra,assess,tools,TRUE,new,"<p>Given the wide use of infrastructure tools today, it should come as no surprise that infrastructure as code has increased in current projects. With this tendency comes the need for testing this code. With <strong>Testinfra</strong> you can test the actual state of your servers configured manually or by tools such as <a href=""https://www.thoughtworks.com/radar/tools/ansible"">Ansible</a>, <a href=""https://www.thoughtworks.com/radar/tools/puppet"">Puppet</a> and <a href=""https://www.thoughtworks.com/radar/platforms/docker"">Docker</a>. Testinfra aims to be a <a href=""https://www.thoughtworks.com/radar/tools/serverspec"">Serverspec</a> equivalent in Python and is written as a plugin to the Pytest test engine.</p>"
Yarn,assess,tools,TRUE,new,"<p><strong><a href=""https://yarnpkg.com/en/"">Yarn</a></strong> is a new package manager that replaces the existing workflow for the npm client while remaining compatible with the npm registry. With the npm client, we may end up with a different tree structure under node_modules based on the order that dependencies are installed. This nondeterministic nature can cause ""works on my machine"" problems. By breaking the installation steps into resolution, fetching and linking, Yarn avoids these issues using deterministic algorithms and lockfiles and thus guarantees repeatable installations. We've also seen significantly faster builds in our continuous integration (CI) environment because of Yarn caching all the packages it downloads.</p>"
Ember.js,adopt,languages-and-frameworks,FALSE,no change,"<p>If you are faced with building a single-page application (SPA) and trying to choose a framework to build with, <strong><a href=""http://emberjs.com/"">Ember.js</a></strong> has emerged as a leading choice. Our teams praise Ember for its highly productive developer experience, with far fewer surprises than other frameworks such as <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/angularjs"">AngularJS</a>. The Ember CLI build tooling is a haven in the storm of JavaScript build tools, and the Ember core team and community are highly active and responsive.</p>"
Python 3,adopt,languages-and-frameworks,FALSE,moved in,"<p><strong>Python 3</strong> introduced many useful features that are not backward compatible with Python 2.x. It also removed numerous Python 2.x features that were maintained for backward compatibility, making Python 3 easier to learn and use and more consistent with the rest of the language. Our experience using Python 3 in domains such as machine learning and web application development shows that both the language and most of its <a href=""http://py3readiness.org/"">supporting libraries</a> have matured for adoption. We were able to fork and patch minor issues of existing libraries or avoided using incompatible Python 2.x libraries that had been abandoned. If you are developing in Python we strongly encourage you to use Python 3.</p>"
ReactiveX,adopt,languages-and-frameworks,FALSE,no change,"<p>Distributed systems often utilize multithreading, event-based communication and nonblocking I/O to improve the overall system efficiency. These programming techniques impose challenges such as low-level threading, synchronization, thread safety, concurrent data structures, and non-blocking I/O. The open source <strong><a href=""http://reactivex.io/"">ReactiveX</a></strong> library beautifully abstracts away these concerns, provides the required application plumbing, and extends the <a href=""https://en.wikipedia.org/wiki/Observer_pattern"">observable pattern</a> on streams of asynchronous events. ReactiveX also has an active developer community and supports a growing list of languages, the most recent addition being <a href=""https://github.com/ReactiveX/RxSwift"">RxSwift</a>. It also implements binding to mobile and desktop platforms.</p>"
Redux,adopt,languages-and-frameworks,FALSE,no change,"<p>With the increasing complexity of single-page JavaScript applications, we have seen a more pressing need to make client-side state management predictable. <a href=""http://redux.js.org/""><strong>Redux</strong></a>, with its <a href=""http://redux.js.org/docs/introduction/ThreePrinciples.html"">three principles</a> of restrictions for updating state, has proven to be invaluable in a number of projects we have implemented. <a href=""https://egghead.io/courses/getting-started-with-redux"">Getting Started with Redux</a> and <a href=""https://egghead.io/courses/building-react-applications-with-idiomatic-redux"">idiomatic Redux</a> tutorials are a good starting point for new and experienced users. Its minimal library design has spawned a rich set of tools, and we encourage you to check out the <a href=""https://github.com/markerikson/redux-ecosystem-links"">redux-ecosystem-links</a> project for examples, middleware and utility libraries. We also particularly like the testability story: Dispatching actions, state transitions and rendering can be unit-tested separately from one another and with minimal amounts of mocking.</p>"
Avro,trial,languages-and-frameworks,TRUE,new,"<p><strong><a href=""https://avro.apache.org/"">Avro</a></strong> is a framework for data serialization. By storing schema along with the message content, it encourages schema evolution. Producers can edit field names, add new fields or delete existing fields and Avro guarantees that the clients continue to consume the messages. Having a schema allows data to be written without overhead which results in compact data encoding and faster data processing. Although the exchange of structure-less messages between producer and consumer is flexible, we've seen teams facing issues with incompatible unprocessed messages in the queue during deployments. We've used Avro in a number of projects and would recommend using it over just sending unstructured messages.</p>"
Elixir,trial,languages-and-frameworks,FALSE,no change,"<p>Interest in the <a href=""http://elixir-lang.org/""><strong>Elixir</strong></a> programming language continues to build. Increasingly, we see it used in serious projects and hear feedback from developers who find its Actor model to be robust and very fast. Elixir, which is built on top of the Erlang virtual machine, is showing promise for creating highly concurrent and fault-tolerant systems. Elixir has distinctive features such as the Pipe operator, which allows developers to build a pipeline of functions as you would in the UNIX command shell. The shared byte code allows Elixir to interoperate with Erlang and leverage existing libraries while supporting tools such as the Mix build tool, the IEx interactive shell and the <a href=""http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html"">ExUnit</a> unit-testing framework.</p>"
Enzyme,trial,languages-and-frameworks,FALSE,no change,"<p>We've been enjoying the rapid component-level UI testing that <a href=""http://airbnb.io/enzyme/""><strong>Enzyme</strong></a> provides for <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React.js</a> applications. Unlike many other snapshot-based testing frameworks, Enzyme allows you to test without doing on-device rendering, which results in faster and more granular testing. This is a contributing factor in our ability to massively reduce the amount of functional testing we find we have to do in React applications.</p>"
Hangfire,trial,languages-and-frameworks,TRUE,new,"<p>One common problem in application development is how to schedule tasks that run outside the main process periodically or when certain conditions are met. The problem gets more complicated when unexpected events, such as application shutdowns, occur. The <strong><a href=""http://hangfire.io/"">Hangfire</a></strong> framework, as our teams discovered, can do this and much more in the .NET environment. Hangfire is both easy to use and flexible, and it embraces a functional style. Particularly interesting is its ability to save a task's state so it can resume when an application restarts after a crash or shutdown.</p>"
Nightwatch,trial,languages-and-frameworks,TRUE,new,"<p><a href=""http://nightwatchjs.org/""><strong>Nightwatch</strong></a> is a framework that allows automated acceptance tests for browser-based apps to be created in JavaScript and run in <a href=""https://www.thoughtworks.com/radar/platforms/node-js"">Node.js</a>. Nightwatch allows tests to be defined using a fluent API which can then be executed against a Selenium/WebDriver server. In the case of single page apps or other JavaScript-heavy pages, this allows the automated tests to be created and run within the same language and environment as the bulk of the code.</p>"
Phoenix,trial,languages-and-frameworks,FALSE,no change,"<p>Some of our ThoughtWorks teams have had very positive experiences with <strong>Phoenix</strong> , a server-side web MVC framework written in <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/elixir"">Elixir</a>. In addition to being streamlined and easy to use, Phoenix takes advantage of Elixir to be extremely fast. For some developers, Phoenix evokes the joy they experienced when first discovering Ruby and Rails. Although the ecosystem of libraries for Phoenix is not as extensive as for some more mature frameworks, it should benefit from the continuing success and growth of support for Elixir.</p>"
Quick and Nimble,trial,languages-and-frameworks,FALSE,no change,"<p>Most of our iOS teams are now using the <strong><a href=""https://github.com/Quick/Quick"">Quick</a> and <a href=""https://github.com/Quick/Nimble"">Nimble</a></strong> pairing for their unit tests. In the <a href=""http://rspec.info/"">RSpec</a> family of behavior-driven development (BDD) testing tools, it provides very readable tests (with describe blocks) across <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/swift"">Swift</a> and Objective-C and has good support for asynchronous testing.</p>"
Vue.js,trial,languages-and-frameworks,FALSE,moved in,"<p>In the ever-changing world of front-end JavaScript frameworks, one of the emerging favorites appears to be <strong><a href=""https://vuejs.org/"">Vue.js</a>.</strong> Vue.js is a lightweight alternative to <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/angularjs"">AngularJS</a>. It is designed to be a very flexible—and a less opinionated—library that offers a set of tools for building interactive web interfaces around concepts such as modularity, components and reactive data flow. It has a low learning curve, which makes it interesting for less experienced developers and beginners. Note, though, that Vue.js is not a full-blown framework; it is focused on the view layer only and therefore is easy to integrate with other libraries or existing projects.</p>"
Angular,assess,languages-and-frameworks,TRUE,new,"<p>In the previous Radar, we moved <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/angularjs"">AngularJS</a> into the Hold ring (where it remains in this edition). When it comes to <strong>Angular 2</strong> , we're seeing mixed messages. Over the past year some teams at ThoughtWorks have used Angular 2 successfully and consider it a solid choice. However, Angular 2 is a rewrite, not an evolution, of AngularJS, and switching from AngularJS to Angular 2 is not much different than switching from AngularJS to another framework. Given the, in our experience, superior contenders such as <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React.js</a>, <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/ember-js"">Ember.js</a> and <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/vue-js"">Vue.js</a>, we're still hesitant to give Angular 2 a strong recommendation. We do want to highlight, though, that it is not a bad choice, especially if you bought into TypeScript.</p>"
Caffe,assess,languages-and-frameworks,TRUE,new,"<p><a href=""http://caffe.berkeleyvision.org/""><strong>Caffe</strong></a> is an open source library for deep learning created by the <a href=""http://bair.berkeley.edu/"">Berkeley Vision and Learning Center</a>. It mostly focusses on convolutional networks for computer vision applications. Caffe is a solid and popular choice for computer vision-related tasks and you can download many successful models made by Caffe users from the Caffe Model Zoo for out-of-the-box use. Like <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/keras"">Keras</a>, Caffe is a Python-based API. In Keras, however, models and components are objects created directly in Python code, whereas Caffe models are described by <a href=""https://developers.google.com/protocol-buffers/"">Protobuf</a> configuration files. Either approach has its pros and cons, and converting between the two is also possible.</p>"
DeepLearning.scala,assess,languages-and-frameworks,TRUE,new,"<p><strong><a href=""https://github.com/ThoughtWorksInc/DeepLearning.scala"">DeepLearning.scala</a></strong> is an open source deep-learning toolkit in Scala created by our colleagues at ThoughtWorks. We're excited about this project because it uses differentiable functional programming to create and compose neural networks; a developer simply writes code in Scala with static typing. DeepLearning.scala currently supports basic types such as float, double, GPU-accelerated N-dimensional arrays as well as algebraic data types. We're looking forward to future releases of the toolkit which are said to support higher order functions and distributed training on <a href=""https://www.thoughtworks.com/radar/platforms/apache-spark"">Spark</a>.</p>"
ECMAScript 2017,assess,languages-and-frameworks,FALSE,no change,"<p><strong>ECMAScript 2017</strong> —not to be confused with ES7 (a.k.a. ECMAScript 2016)—brings several noteworthy improvements to the language. Browsers are expected to implement this standard fully in the summer of 2017, but the <a href=""https://www.thoughtworks.com/radar/tools/babel"">Babel</a> JavaScript compiler already supports a number of the features today. If you make extensive use of JavaScript and your codebase is under active development, we recommend that you add Babel to your build pipeline and begin using the <a href=""https://www.npmjs.com/package/babel-preset-es2017"">supported features</a>.</p>"
Instana,assess,languages-and-frameworks,TRUE,new,"<p><strong><a href=""http://www.instana.com/"">Instana</a></strong> is yet another entrant into the crowded application performance management space. The fact that it's built from the ground up for cloud native architectures differentiates Instana from many of its competitors. Features include dynamic discovery, distributed tracing and service health plus the ability to ""time shift"" your view of your infrastructure to the moment an incident occurred. It remains to be seen whether this product can gain traction over the combination of open source projects—such as <a href=""https://www.thoughtworks.com/radar/tools/consul"">Consul</a>, <a href=""https://www.thoughtworks.com/radar/tools/prometheus"">Prometheus</a> and the implementations of <a href=""https://www.thoughtworks.com/radar/platforms/opentracing"">OpenTracing</a>—that do the same thing; however it's worth taking a look if you need an out-of-the-box solution.</p>"
JuMP,assess,languages-and-frameworks,FALSE,no change,"<p><strong><a href=""https://github.com/JuliaOpt/JuMP.jl"">JuMP</a></strong> is a domain-specific language for <a href=""https://en.wikipedia.org/wiki/Mathematical_optimization"">mathematical optimizations</a> in <a href=""http://julialang.org/"">Julia</a>. JuMP defines a common API called <a href=""https://github.com/JuliaOpt/MathProgBase.jl"">MathProgBase</a> and enables users to write solver-agnostic code in Julia. Currently supported solvers include <a href=""http://artelys.com/en/optimization-tools/knitro"">Artelys Knitro</a>, <a href=""https://projects.coin-or.org/Bonmin"">Bonmin</a>, <a href=""https://projects.coin-or.org/Cbc"">Cbc</a>, <a href=""https://projects.coin-or.org/Clp"">Clp</a>, <a href=""https://projects.coin-or.org/Couenne"">Couenne</a>, <a href=""http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/"">CPLEX</a>, <a href=""https://github.com/ifa-ethz/ecos"">ECOS</a>, <a href=""http://www.fico.com/en/products/fico-xpress-optimization-suite"">FICO Xpress</a>, <a href=""http://www.gnu.org/software/glpk/"">GLPK</a>, <a href=""http://www.gurobi.com"">Gurobi</a>, <a href=""https://projects.coin-or.org/Ipopt"">Ipopt</a>, <a href=""http://www.mosek.com/"">MOSEK</a>, <a href=""http://ab-initio.mit.edu/wiki/index.php/NLopt"">NLopt</a> and <a href=""https://github.com/cvxgrp/scs"">SCS</a>. One other benefit is the implementation of automatic differentiation technique in reverse mode to compute derivatives so users are not limited to the standard operators like sin, cos, log and sqrt but can also implement their own custom objective functions in Julia.</p>"
Keras,assess,languages-and-frameworks,TRUE,new,"<p><a href=""https://keras.io/""><strong>Keras</strong></a> is a high-level interface in Python for building neural networks. Created by a Google engineer, Keras is open source and runs on top of either <a href=""https://www.thoughtworks.com/radar/platforms/tensorflow"">TensorFlow</a> or <a href=""http://github.com/Theano/Theano"">Theano</a>. It provides an amazingly simple interface for creating powerful deep-learning algorithms to train on CPUs or GPUs. Keras is well designed with modularity, simplicity, and extensibility in mind. Unlike a library such as <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/caffe"">Caffe</a>, Keras supports more general network architectures such as recurrent nets, making it overall more useful for text analysis, NLP and general machine learning. If computer vision, or any other specialized branch of machine learning, is your primary concern, Caffe may be a more appropriate choice. However, if you're looking to learn a simple yet powerful framework, Keras should be your first choice.</p>"
Knet.jl,assess,languages-and-frameworks,TRUE,new,"<p><a href=""http://knet.rtfd.org""><strong>Knet.jl</strong></a> is the <a href=""http://www.ku.edu.tr/en"">Koç University</a> deep-learning framework implemented in <a href=""http://julia.rtfd.org"">Julia</a> by <a href=""http://www.denizyuret.com"">Deniz Yuret</a> and collaborators. Unlike gradient-generating compilers such as <a href=""https://github.com/Theano/Theano"">Theano</a> and <a href=""https://www.thoughtworks.com/radar/platforms/tensorflow"">TensorFlow</a> which force users into a restricted mini-language, Knet allows the definition and training of machine-learning models using the full power and expressiveness of Julia. Knet uses dynamic computational graphs generated at runtime for the automatic differentiation of almost any Julia code. We really like the support of GPU operations through the KnetArray type, and in case you don't have access to a GPU machine, the team behind Knet also maintains a <a href=""http://knet.readthedocs.io/en/latest/install.html#using-amazon-aws"">preconfigured Amazon Machine Image (AMI)</a> so you can evaluate it in the cloud.</p>"
Kotlin,assess,languages-and-frameworks,TRUE,new,"<p>The <strong><a href=""https://kotlinlang.org/"">Kotlin</a></strong> programming language is on many of our developers' bucket lists to assess this year, and some have already used it successfully in production. It is an open source JVM language from JetBrains. Our Swift mobile developers like it as it is syntactically closer to <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/swift"">Swift</a> and equally concise. Our Java developers have enjoyed its seamless interoperability with the Java language and tools and found it easier to learn than Scala. Kotlin supports functional programming concepts but with less features than Scala. Developers on our teams who like static typing with the compiler catching null pointer defects found themselves writing fewer boilerplate tests.</p>"
Physical Web,assess,languages-and-frameworks,FALSE,no change,"<p>We have been intrigued by the <strong><a href=""https://google.github.io/physical-web/"">Physical Web</a></strong> standard created by Google. The idea of Physical Web is simple—beacons broadcast a URL—but the possibilities are broad. Basically, this is a way to annotate the physical world, tying objects and locations into the digital realm. The current transport mechanism is <a href=""https://github.com/google/eddystone/tree/master/eddystone-url"">Eddystone URLs</a> over Bluetooth LE, and sample clients are available. Although there are obvious security concerns with following randomly discovered links, we are most interested in use cases with customized clients where you can filter or proxy the URLs as required.</p>"
PostCSS,assess,languages-and-frameworks,TRUE,new,"<p><strong><a href=""https://github.com/postcss/postcss"">PostCSS</a></strong> is a <a href=""https://www.thoughtworks.com/radar/platforms/node-js"">Node.js</a>-based JavaScript framework for operating on an abstract syntax tree-based representation of CSS documents with a rich ecosystem of plugins. Often incorrectly thought of as a preprocessor (such as SASS or Less), we find that the real power of PostCSS comes from the number of things that can be done with the rich set of plugins which includes linting (<a href=""https://github.com/stylelint/stylelint"">the stylelint plugin</a>), cross-compilation (<a href=""https://github.com/postcss/sugarss"">the sugarss plugin</a>), name-mangling to avoid selector collision (<a href=""https://github.com/css-modules/postcss-modules"">the modules plugin</a>), boilerplate CSS code generation (<a href=""https://github.com/postcss/autoprefixer"">the autoprefixer plugin</a>), <a href=""http://cssnano.co/"">minification</a> and many others. The different maturity levels of the plugins notwithstanding, PostCSS itself remains a simple and powerful framework for treating CSS like a full-fledged language for front-end development.</p>"
Spring Cloud,assess,languages-and-frameworks,TRUE,new,"<p>Teams building systems composed of microservices need to think about coordination techniques such as service discovery, load balancing, circuit breaking and health checking. Many of these techniques require teams to set up tooling, which is not always trivial. The <strong><a href=""http://projects.spring.io/spring-cloud/"">Spring Cloud</a></strong> project provides tools for developers so they can use these coordination techniques in the familiar Spring environment. These tools support <a href=""https://www.thoughtworks.com/radar/tools/consul"">Consul</a>, <a href=""https://zookeeper.apache.org/"">ZooKeeper</a> and the <a href=""https://www.thoughtworks.com/radar/platforms/netflix-oss-full-stack"">Netflix OSS full stack</a>, all tools that we like. Simply put, it makes it easy to do the right thing with these tool sets. Although our usual concerns with Spring still stand, namely that it hides too much of the complexity, you should consider Spring Cloud if you are in the ecosystem and need to solve these problems.</p>"
Three.js,assess,languages-and-frameworks,FALSE,no change,"<p>Despite the fervor surrounding the spate of new headsets, we believe there are many VR and AR scenarios that make sense in the browser, particularly on mobile. Given this trend, we have seen an uptick in usage of <a href=""https://threejs.org/""><strong>Three.js</strong></a>, a powerful JavaScript visualization and 3D rendering framework. The growth in support for WebGL, which it is based on, has helped adoption, as has the vibrant community supporting this open source project.</p>"
WebRTC,assess,languages-and-frameworks,FALSE,no change,"<p>Widespread adoption of AR/VR as a collaboration and communication medium requires a modern and readily available video streaming platform. <strong><a href=""https://webrtc.org/"">WebRTC</a></strong> is an emerging standard for real-time communication between browsers that enables video streaming within commonly available web technologies. The range of browsers that support this standard is increasing, but Microsoft and Apple have been slow to adopt WebRTC in their proprietary browsers. If momentum continues to build, WebRTC could form the future foundation for AR/VR collaboration on the web.</p>"
AngularJS,hold,languages-and-frameworks,FALSE,no change,"<p><a href=""https://angularjs.org/""><strong>AngularJS</strong></a> helped revolutionize the world of single-page JavaScript applications, and we have delivered many projects successfully with it over the years. However, we are no longer recommending it (v1) for teams starting fresh projects. We prefer the ramp-up speed and more maintainable codebases we are seeing with <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/ember-js"">Ember</a> and <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React</a>, particularly in conjunction with <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/redux"">Redux</a>.</p>"