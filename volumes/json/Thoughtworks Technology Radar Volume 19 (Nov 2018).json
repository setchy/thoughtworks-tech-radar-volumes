[
    {
        "name": "Event Storming",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p>When organizations move toward <a href=\"\"https://martinfowler.com/articles/microservices.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">microservices<span class=\"\"pop-out-icon\"\"></span></a>, one of the main drivers is the hope for faster time to market. However, this aspiration only tends to be realized when services (and their supporting teams) are cleanly sliced along long-lived business domain boundaries. Otherwise meaningful features will naturally require tight coordination between multiple teams and services, introducing natural friction in competing roadmap prioritization. The solution to this problem is good domain modeling, and <strong>event storming</strong> has rapidly become one of our favorite methods for rapidly identifying the key concepts in a problem space and aligning a variety of stakeholders in the best way to slice potential solutions.</p>\""
    },
    {
        "name": "1% canary",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Fast feedback is one of our <a href=\"\"https://www.thoughtworks.com/insights/blog/what-are-our-core-values-and-practices-building-software\"\">core values</a> for building software. For many years, we've used the <a href=\"\"https://martinfowler.com/bliki/CanaryRelease.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">canary release<span class=\"\"pop-out-icon\"\"></span></a> approach to encourage early feedback on new software versions, while reducing the risk through incremental rollout to selected users. One of the questions regarding this technique is how to segment users. Canary releases to a very small segment (say 1%) of users can be a catalyst for change. While starting with a very small segment of users enables teams to get comfortable with the technique, capturing fast user feedback enables diverse teams to observe the impact of new releases and learn and adjust course as necessary—a priceless change in engineering culture. We call this, the mighty <strong>1% canary</strong>.</p>\""
    },
    {
        "name": "Bounded Buy",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Most organizations that don't have the resources to custom-build their software will select out-of-the-box or SaaS solutions to meet their requirements. All too often, however, these solutions tend to aggressively expand their scope to entangle themselves into every part of your business. This blurs integration boundaries and makes change less predictable and slow. To mitigate this risk, we recommend that organizations develop a clear target capability model and then employ a strategy we call <strong>Bounded Buy</strong> —that is, only select vendor products that are modular and decoupled and can be contained within the <a href=\"\"https://martinfowler.com/bliki/BoundedContext.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Bounded Context<span class=\"\"pop-out-icon\"\"></span></a> of a single business capability. This modularity and independent deliverability should be included in the acceptance criteria for a <a href=\"\"https://www.slideshare.net/tgriffo/agile-australia-2017-hypothesisdriven-cots-software-selection-tiago-griffo\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">vendor selection process<span class=\"\"pop-out-icon\"\"></span></a>.</p>\""
    },
    {
        "name": "Crypto shredding",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Maintaining proper control over sensitive data is difficult, especially when—for backup and recovery purposes—data is copied outside of a master system of record. <strong>Crypto shredding</strong> is the practice of rendering sensitive data unreadable by deliberately overwriting or deleting encryption keys used to secure that data. For example, an entire table of customer personal details could be encrypted using random keys for each record, with a different table storing the keys. If a customer exercised their \"\"right to be forgotten,\"\" we can simply delete the appropriate key, effectively \"\"shredding\"\" the encrypted data. This technique can be useful where we're confident of maintaining appropriate control of a smaller set of encryption keys but less confident about control over a larger data set.</p>\""
    },
    {
        "name": "Four key metrics",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>The <a href=\"\"https://devops-research.com/research.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">State of DevOps<span class=\"\"pop-out-icon\"\"></span></a> report, first published in 2014, states that high-performing teams create high-performing organizations. Recently, the team behind the report released <a href=\"\"https://itrevolution.com/book/accelerate/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Accelerate<span class=\"\"pop-out-icon\"\"></span></a>, which describes the scientific method they've used in the report. A key takeaway of both are the <strong>four key metrics</strong> to support software delivery performance: lead time, deployment frequency, mean time to restore (MTTR), and change fail percentage. As a consultancy that has helped many organizations transform, these metrics have come up time and time again as a way to help organizations determine whether they're improving the overall performance. Each metric creates a virtuous cycle and focuses the teams on continuous improvement: to reduce lead time, you reduce wasteful activities which, in turn, lets you deploy more frequently; deployment frequency forces your teams to improve their practices and automation; your speed to recover from failure is improved by better practices, automation and monitoring which reduces the frequency of failures.</p>\""
    },
    {
        "name": "Multi-account cloud setup",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>On-demand self-service is a key characteristic (and benefit) of cloud computing. When large-scale service landscapes are deployed using a single account, rules and processes around usage of that account become necessary, often involving approval steps that increase turnaround time. A better approach is a <strong>multi-account cloud setup</strong> where several accounts are used, in the extreme one account per team. This does add overhead in other places, for example, ensuring shared billing, enabling communication between VPCs and managing the relationship with the cloud provider. However, it often accelerates development and it usually improves security, because single-service accounts are easier to audit and, in the case of a breach, the impact is greatly reduced. Having multiple accounts also reduces stickiness, because an account provides a good boundary for services that can be moved en bloc to another cloud provider.</p>\""
    },
    {
        "name": "Observability as code",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>The observability is an integral part of operating a distributed and <a href=\"\"https://martinfowler.com/articles/microservices.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">microservices architecture<span class=\"\"pop-out-icon\"\"></span></a>. We rely on different system outputs such as distributed tracing, aggregate logs and metrics to infer the internal state of the distributed components, diagnose where the problems are and get to the root cause. An important aspect of an observability ecosystem is monitoring—visualizing and analyzing the system's output—and alerting when unexpected conditions are detected. Traditionally, configuration of monitoring dashboards and setting up alerts is done through GUI-based point-and-click systems. This approach leads to nonrepeatable dashboard configurations, no ability to continuously test and adjust alerts to avoid alert fatigue or missing out on important alerts, and drift from organizational best practices. We highly recommend treating your observability ecosystem configurations as code, called <strong>observability as code</strong> , and adopt <a href=\"\"https://www.thoughtworks.com/radar/tools/infrastructure-as-code\"\">infrastructure as code</a> for your monitoring and alerting infrastructure. Choose observability products that support configuration through version-controlled code and execution of APIs or commands via infrastructure CD pipelines. Observability as code is an often-forgotten aspect of infrastructure as code and, we believe, crucial enough to be called out.</p>\""
    },
    {
        "name": "Risk-commensurate vendor strategy",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Often, in an effort to outsource risk to their suppliers, businesses look for \"\"one throat to choke\"\" on their most critical and risky system implementations. Unfortunately, this gives them fewer solution choices and less flexibility. Instead, businesses should look to maintain the greatest vendor independence where the business risk exposure is highest. We see a new <strong>risk-commensurate vendor strategy</strong> emerging that encourages investment to maintain vendor independence for highly critical business systems. Less critical business functions can take advantage of the streamlined delivery of a vendor-native solution because it allows them to absorb more easily the impact of losing that vendor. This trade-off has become apparent as the major cloud providers have expanded their range of service offerings. For example, using AWS Secret Management Service can speed up initial development and has the benefit of ecosystem integration, but it will also add more inertia if you ever need to migrate to a different cloud provider than it would if you had implemented, for example, <a href=\"\"https://www.thoughtworks.com/radar/tools/hashicorp-vault\"\">Vault</a>.</p>\""
    },
    {
        "name": "Run cost as architecture fitness function",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We still see teams who aren't tracking the cost of running their applications as closely as they should as their software architecture or usage evolves. This is particularly true when they're using <a href=\"\"https://www.thoughtworks.com/radar/techniques/serverless-architecture\"\">serverless</a>, which developers assume will provide lower costs since you're not paying for unused server cycles. However, the major cloud providers are pretty savvy at setting their pricing models, and heavily used serverless functions, although very useful for rapid iteration, can get expensive quickly when compared with dedicated cloud (or on-premise) servers. We advise teams to frame a system's <strong>run cost as architecture fitness function</strong> , which means: track the cost of running your services against the value delivered; when you see deviations from what was expected or acceptable, have a discussion about whether it's time to evolve your architecture.</p>\""
    },
    {
        "name": "Secrets as a service",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We've long cautioned people about the temptation to check secrets into their source code repositories. Previously, we've recommended <a href=\"\"https://www.thoughtworks.com/radar/techniques/decoupling-secret-management-from-source-code\"\">decoupling secret management from source code</a>. However, now we're seeing a set of good tools emerge that offer <strong>secrets as a service</strong>. With this approach, rather than hardwiring secrets or configuring them as part of the environment, applications retrieve them from a separate process. Tools such as <a href=\"\"https://www.thoughtworks.com/radar/tools/hashicorp-vault\"\">Vault</a> by HashiCorp let you manage secrets separately from the application and enforce policies such as frequent rotation externally.</p>\""
    },
    {
        "name": "Security Chaos Engineering",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p>Although we've had mostly new blips in this edition of the Radar, we think it's worth continuing to call out the usefulness of <strong>Security Chaos Engineering</strong>. We've moved it to Trial because the teams using this technique are confident that the security policies they have in place are robust enough to handle common security failure modes. Still, proceed with caution when using this technique—we don't want our teams to become desensitized to these issues.</p>\""
    },
    {
        "name": "Versioning data for reproducible analytics",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>When it comes to large-scale data analysis or machine intelligence problems, being able to reproduce different versions of analysis done on different data sets and parameters is immensely valuable. To achieve reproducible analysis, both the data and the model (including algorithm choice, parameters and hyperparameters) need to be version controlled. <strong>Versioning data for reproducible analytics</strong> is a relatively trickier problem than versioning models because of the data size. Tools such as <a href=\"\"https://dvc.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">DVC<span class=\"\"pop-out-icon\"\"></span></a> help in versioning data by allowing users to commit and push data files to a remote cloud storage bucket using a git-like workflow. This makes it easy for collaborators to pull a specific version of data to reproduce an analysis.</p>\""
    },
    {
        "name": "Chaos Katas",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong>Chaos Katas</strong> is a technique that our teams have developed to train and upskill infrastructure and platform engineers. It combines <a href=\"\"https://www.thoughtworks.com/radar/techniques/chaos-engineering\"\">Chaos Engineering</a> techniques—that is, creating failures and outages in a controlled environment—with the systematic teaching and training approach of <a href=\"\"https://en.wikipedia.org/wiki/Kata\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Kata<span class=\"\"pop-out-icon\"\"></span></a>. Here, Kata refers to code patterns that trigger controlled failures, allowing engineers to discover the problem, recover from the failure, run postmortem and find the root cause. Repeated execution of Katas helps engineers to internalize their new skills.</p>\""
    },
    {
        "name": "Distroless Docker images",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>When building <a href=\"\"https://www.thoughtworks.com/radar/platforms/docker\"\">Docker</a> images for our applications, we're often concerned with two things: the security and the size of the image. Traditionally, we've used <a href=\"\"https://www.thoughtworks.com/radar/techniques/container-security-scanning\"\">container security scanning</a> tools to detect and patch <a href=\"\"https://cve.mitre.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">common vulnerabilities and exposures<span class=\"\"pop-out-icon\"\"></span></a> and small distributions such as <a href=\"\"https://alpinelinux.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Alpine Linux<span class=\"\"pop-out-icon\"\"></span></a> to address the image size and distribution performance. In this Radar, we're excited about addressing the security and size of containers with a new technique called <strong>distroless docker images</strong> , pioneered by Google. With this technique, the footprint of the image is reduced to the application, its resources and language runtime dependencies, without operating system distribution. The advantages of this technique include reduced noise of security scanners, smaller security attack surface, reduced overhead of patching vulnerabilities and even smaller image size for higher performance. Google has published a set of <a href=\"\"https://github.com/GoogleContainerTools/distroless\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">distroless container images<span class=\"\"pop-out-icon\"\"></span></a> for different languages. You can create distroless application images using the Google build tool <a href=\"\"https://bazel.build/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Bazel<span class=\"\"pop-out-icon\"\"></span></a>, which has rules for creating distroless containers or simply use multistage Dockerfiles. Note that distroless containers by default don't have a shell for debugging. However, you can easily find debug versions of distroless containers online, including a <a href=\"\"https://busybox.net/downloads/BusyBox.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">busybox shell<span class=\"\"pop-out-icon\"\"></span></a>.</p>\""
    },
    {
        "name": "Incremental delivery with COTS",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>At ThoughtWorks, as early adopters and leaders in the agile space, we've been proponents of the practice of incremental delivery. We've also advised many clients to look at off-the-shelf software through a \"\"Can this be released incrementally?\"\" lens. This has often been difficult because of the big-bang approach of most vendors which usually involves migrating large amounts of data. Recently, however, we've also had success using <strong>incremental delivery with COTS</strong> (commercial off-the-shelf), launching specific business processes incrementally to smaller subsets of users. We recommend you assess whether you can apply this practice to the vendor software of your choice, to help reduce the risks involved in big-bang deliveries.</p>\""
    },
    {
        "name": "Infrastructure configuration scanner",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>For some time now we've recommended increased delivery team ownership of their entire stack, including infrastructure. This means increased responsibility in the delivery team itself for configuring infrastructure in a safe, secure, and compliant way. When adopting cloud strategies, most organizations default to a tightly locked-down and centrally managed configuration to reduce risk, but this also creates substantial productivity bottlenecks. An alternative approach is to allow teams to manage their own configuration, and use an <strong>Infrastructure configuration scanner</strong> to ensure the configuration is set in a safe and secure way. <a href=\"\"http://github.com/iagcl/watchmen\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Watchmen<span class=\"\"pop-out-icon\"\"></span></a> is an interesting tool, built to provide rule-driven assurance of AWS account configurations that are owned and operated independently by delivery teams. <a href=\"\"https://www.thoughtworks.com/radar/tools/scout2\"\">Scout2</a> is another example of configuration scanning to support secure compliance.</p>\""
    },
    {
        "name": "Pre-commit downstream build checks",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>In more complex architectures and deployments, it may not be immediately obvious that a build that depends on the code currently being checked in is broken. Developers trying to fix a broken build could find themselves working against a moving target, as the build is continually triggered by upstream dependencies. <strong>Pre-commit downstream build checks</strong> is a very simple technique: have a pre-commit or pre-push script check the status of these downstream builds and alert the developer beforehand that a build is broken.</p>\""
    },
    {
        "name": "Service mesh",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>As large organizations transition to more autonomous teams owning and operating their own microservices, how can they ensure the necessary consistency and compatibility between those services without relying on a centralized hosting infrastructure? To work together efficiently, even autonomous microservices need to align with some organizational standards. A <strong>service mesh</strong> offers consistent discovery, security, tracing, monitoring and failure handling without the need for a shared asset such as an API gateway or ESB. A typical implementation involves lightweight reverse-proxy processes deployed alongside each service process, perhaps in a separate container. These proxies communicate with service registries, identity providers, log aggregators and other services. Service interoperability and observability are gained through a shared implementation of this proxy but not a shared runtime instance. We've advocated for a decentralized approach to microservices management for some time and are happy to see this consistent pattern emerge. Open source projects such as <a href=\"\"http://linkerd.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Linkerd<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://www.thoughtworks.com/radar/platforms/istio\"\">Istio</a> will continue to mature and make service meshes even easier to implement.</p>\""
    },
    {
        "name": "\"Handcranking\" of Hadoop clusters using config management tools",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>When organizations choose a <a href=\"\"https://hadoop.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">vanilla Hadoop<span class=\"\"pop-out-icon\"\"></span></a> or <a href=\"\"https://spark.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Spark<span class=\"\"pop-out-icon\"\"></span></a> distribution instead of one of the vendor distributions, they have to decide how they want to provision and manage the cluster. Occasionally, we see <strong>\"\"handcranking\"\" of Hadoop clusters using config management tools</strong> such as <a href=\"\"https://www.ansible.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Ansible<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://www.chef.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Chef<span class=\"\"pop-out-icon\"\"></span></a> and others. Although these tools are great at provisioning immutable infrastructure components, they're not very useful when you have to manage stateful systems and can often lead to significant effort trying to manage and evolve clusters using these tools. We instead recommend using tools such as <a href=\"\"https://ambari.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Ambari<span class=\"\"pop-out-icon\"\"></span></a> to provision and manage your stateful Hadoop or Spark clusters.</p>\""
    },
    {
        "name": "Generic cloud usage",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>The major cloud providers have become increasingly competitive in their pricing and the rapid pace of releasing new features. This leaves consumers in a difficult place when choosing and committing to a provider. Increasingly, we're seeing organizations prepare to use \"\"any cloud\"\" and to avoid vendor lock-in at all costs. This, of course, leads to <strong>generic cloud usage</strong>. We see organizations limiting their use of the cloud to only those features common across all cloud providers—thereby missing out on the providers' unique benefits. We see organizations making large investments in home-grown abstraction layers that are too complex to build and too costly to maintain to stay cloud agnostic. The problem of lock-in is real. We recommend approaching this problem with a multicloud strategy that evaluates the migration cost and effort of capabilities from one cloud to another, against the benefits of using cloud-specific features. We recommend increasing the portability of the workloads by shipping the applications as widely adopted <a href=\"\"https://www.thoughtworks.com/radar/platforms/docker\"\">Docker</a> containers: use open source security and identity protocols to easily migrate the identity of the workloads, a <a href=\"\"https://www.thoughtworks.com/radar/techniques/risk-commensurate-vendor-strategy\"\">risk-commensurate vendor strategy</a> to maintain cloud independence only where necessary and <a href=\"\"https://www.thoughtworks.com/radar/techniques/polycloud\"\">Polycloud</a> to mix and match services from different providers where it makes sense. In short, shift your approach from a generic cloud usage to a sensible multicloud strategy.</p>\""
    },
    {
        "name": "Layered microservices architecture",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>A defining characteristic of a <a href=\"\"https://martinfowler.com/articles/microservices.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">microservices architecture<span class=\"\"pop-out-icon\"\"></span></a> is that system components and services are organized around business capabilities. Regardless of size, microservices encapsulate a meaningful grouping of functionality and information to allow for the independent delivery of business value. This is in contrast to earlier approaches in service architecture which organized services according to technical characteristics. We've observed a number of organizations who've adopted a <strong>layered microservices architecture</strong> , which in some ways is a contradiction in terms. These organizations have fallen back to arranging services primarily according to a technical role, for example, experience APIs, process APIs or system APIs. It's too easy for technology teams to be assigned by layer, so delivering any valuable business change requires slow and expensive coordination between multiple teams. We caution against the effects of this layering and recommend arranging services and teams primarily according to business capability.</p>\""
    },
    {
        "name": "Master data management",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong>Master data management</strong> (MDM) is a classic example of the enterprise \"\"silver bullet\"\" solution: it promises to solve an apparently related class of problems in one go. Through creating a centralized single point of change, coordination, test and deployment, MDM solutions negatively impact an organization's ability to respond to business change. Implementations tend to be long and complex, as organizations try to capture and map all \"\"master\"\" data into the MDM while integrating the MDM solution into all consuming or producing systems.</p>\""
    },
    {
        "name": "Microservice envy",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p><a href=\"\"https://martinfowler.com/articles/microservices.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Microservices<span class=\"\"pop-out-icon\"\"></span></a> has emerged as a leading architectural technique in modern cloud-based systems, but we still think teams should proceed carefully when making this choice. <strong>Microservice envy</strong> tempts teams to complicate their architecture by having lots of services simply because it's a fashionable architecture choice. Platforms such as <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a> make it much easier to deploy complex sets of microservices, and vendors are pushing their solutions to managing microservices, potentially leading teams further down this path. It's important to remember that microservices trade development complexity for operational complexity and require a solid foundation of automated testing, continuous delivery and DevOps culture.</p>\""
    },
    {
        "name": "Request-response events in user-facing workflows",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>On a number of occasions we have seen system designs that use <strong>request-response events in user-facing workflows</strong>. In these cases, the UI is blocked or the user has to wait for a new page to load until a corresponding response message to a request message is received. The main reasons cited for designs like this are performance or a unified approach to communication between backends for synchronous and asynchronous use cases. We feel that the increased complexity—in development, testing and operations—far outweighs the benefit of having a unified approach, and we strongly suggest to use synchronous HTTP requests when synchronous communication between backend services is needed. When implemented well, communication using HTTP rarely is a bottleneck in a distributed system.</p>\""
    },
    {
        "name": "RPA",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Robotic process automation ( <strong>RPA</strong> ) is a key part of many digital transformation initiatives, as it promises to deliver cost savings without having to modernize the underlying architecture and systems. The problem with this approach of focusing only on automating business processes, without addressing the underlying software systems or capabilities, is that this can make it even harder to change the underlying systems by introducing additional coupling. This makes any future attempts to address the legacy IT landscape even more difficult. Very few systems can afford to ignore change and hence RPA efforts need to be coupled with appropriate legacy modernization strategies.</p>\""
    },
    {
        "name": "Apache Atlas",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>With the growing and diverse data needs of enterprises comes a growing need for metadata management. <a href=\"\"https://atlas.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Apache Atlas</strong><span class=\"\"pop-out-icon\"\"></span></a> is a metadata management framework that fits the data governance needs of enterprises. Atlas provides capabilities to model types for metadata, classify data assets, track the data lineage and enable data discovery. However, when building a metadata management platform, we need to be careful not to repeat the mistakes of <a href=\"\"https://www.thoughtworks.com/radar/techniques/master-data-management\"\">master data management</a>.</p>\""
    },
    {
        "name": "AWS",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "moved out",
        "description": "\"<p>We first placed <strong>AWS</strong> in Adopt seven years ago, and the breadth, depth and reliability of its services have improved in leaps and bounds since then. However, we're now moving AWS back into Trial, not because of any deficiencies in its offering, but because its competitors, <a href=\"\"https://www.thoughtworks.com/radar/platforms/google-cloud-platform\"\">GCP</a> and <a href=\"\"https://www.thoughtworks.com/radar/platforms/azure\"\">Azure</a>, have matured considerably and selecting a cloud provider has become increasingly complex. We reserve Adopt for when we see a clear winner in a field. For many years, AWS was the default choice, but we now feel that organizations should make a balanced selection across cloud providers that takes into account their geographic and regulatory footprint, their strategic alignment (or lack thereof) with the providers, and, of course, the fit between their most important needs and the cloud providers' differentiating products.</p>\""
    },
    {
        "name": "Azure",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>Microsoft has steadily improved <a href=\"\"http://azure.microsoft.com\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Azure</strong><span class=\"\"pop-out-icon\"\"></span></a> and today not much separates the core cloud experience provided by the major cloud providers—Amazon, Google and Microsoft. The cloud providers seem to agree and seek to differentiate themselves in other areas such as features, services and cost structure. Microsoft is the provider who shows real interest in the legal requirements of European companies. They’ve a nuanced and plausible strategy, including unique offerings such as <a href=\"\"http://azure.microsoft.com/en-us/global-infrastructure/germany/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Azure Germany<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://www.thoughtworks.com/radar/platforms/azure-stack\"\">Azure Stack</a>, which gives some certainty to European companies in anticipation of the <a href=\"\"http://www.thoughtworks.com/insights/blog/gdpr-it-s-time-rethink-your-approach-privacy\"\" target=\"\"_blank\"\">GDPR</a> and possible legislative changes in the United States.</p>\""
    },
    {
        "name": "Contentful",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>Headless content management systems (CMSes) are becoming a common component of digital platforms. <a href=\"\"http://www.contentful.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Contentful</strong><span class=\"\"pop-out-icon\"\"></span></a> is a modern headless CMS that our teams have successfully integrated into their development workflows. We particularly like its API-first approach and implementing <a href=\"\"http://www.contentful.com/r/knowledgebase/cms-as-code/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CMS as code<span class=\"\"pop-out-icon\"\"></span></a>. It supports powerful content modeling primitives as code and content model evolution scripts, which allow treating it as other data store schemas and applying <a href=\"\"http://martinfowler.com/articles/evodb.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">evolutionary database design<span class=\"\"pop-out-icon\"\"></span></a> practices to CMS development. Other notable features that we've liked include inclusion of two CDNs to deliver media assets and JSON documents, good support for localization and the ability—albeit with some effort—to integrate with <a href=\"\"https://www.thoughtworks.com/radar/platforms/auth0\"\">Auth0</a>.</p>\""
    },
    {
        "name": "Google Cloud Platform",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>As <a href=\"\"http://cloud.google.com/free/ce1/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Google Cloud Platform</strong><span class=\"\"pop-out-icon\"\"></span></a> (GCP) has expanded in terms of available geographic regions and maturity of services, customers globally can now seriously consider it for their cloud strategy. In some areas, GCP has reached feature parity with its main competitor, Amazon Web Services, while in other areas it has differentiated itself—notably with accessible machine learning platforms, data engineering tools, and a workable Kubernetes as a service solution (<a href=\"\"https://www.thoughtworks.com/radar/platforms/gke\"\">GKE</a>). In practice, our teams have nothing but praise for the developer experience working with the GCP tools and APIs.</p>\""
    },
    {
        "name": "Shared VPC",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>As we've gained more experience with the public cloud across organizations large and small, certain patterns have emerged. One of those patterns is a virtual private cloud network managed at the organizational level and divided into smaller subnets under the control of each delivery team. This is closely related to the idea of <a href=\"\"https://www.thoughtworks.com/radar/techniques/multi-account-cloud-setup\"\">multiaccount cloud setup</a> and helps to <a href=\"\"https://www.thoughtworks.com/radar/techniques/partition-infrastructure-along-team-bounds\"\">partition an infrastructure along team bounds</a>. After configuring this setup many times using VPCs, subnets, security groups and NACLs, we really like Google's notion of the <a href=\"\"https://cloud.google.com/vpc/docs/shared-vpc\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>shared VPC</strong><span class=\"\"pop-out-icon\"\"></span></a>. Shared VPC makes organizations, projects, VPCs and subnets first-class entities in network configurations. VPCs can be managed by an organization's administrators who can delegate subnet administration to projects. Projects can then be explicitly associated with subnets in the VPC. This simplifies configuration and makes security and access control more transparent.</p>\""
    },
    {
        "name": "TICK Stack",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p><a href=\"\"http://www.influxdata.com/time-series-platform/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>TICK Stack</strong><span class=\"\"pop-out-icon\"\"></span></a> is a collection of open source components that combine to deliver a platform for easily storing, visualizing and monitoring time series data such as metrics and events. The components are: <a href=\"\"https://www.influxdata.com/time-series-platform/telegraf/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Telegraf<span class=\"\"pop-out-icon\"\"></span></a>, a server agent for collecting and reporting metrics; <a href=\"\"https://www.influxdata.com/time-series-platform/influxdb/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">InfluxDB<span class=\"\"pop-out-icon\"\"></span></a>, a high-performance time series database; <a href=\"\"https://www.influxdata.com/time-series-platform/chronograf/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Chronograf<span class=\"\"pop-out-icon\"\"></span></a>, a user interface for the platform; and <a href=\"\"https://www.influxdata.com/time-series-platform/kapacitor/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Kapacitor<span class=\"\"pop-out-icon\"\"></span></a>, a data-processing engine that can process, stream and batch data from InfluxDB. Unlike <a href=\"\"https://www.thoughtworks.com/radar/tools/prometheus\"\">Prometheus</a>, which is based on the pull model, TICK Stack is based on the push model of collecting data. The heart of the system is the InfluxDB component, which is one of the best time series databases. The stack is backed by InfluxData and although you need the enterprise version for features such as database clustering, it's still a fairly good choice for monitoring. We're using it in a few places in production and have had good experiences with it.</p>\""
    },
    {
        "name": "Azure DevOps",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://azure.microsoft.com/en-us/services/devops/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Azure DevOps<span class=\"\"pop-out-icon\"\"></span></a></strong> services include a set of managed services such as hosted Git repos, CI and CD pipelines and artifact repository. Azure DevOps services have replaced <a href=\"\"https://docs.microsoft.com/en-us/azure/devops/user-guide/what-happened-vsts?view=vsts\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Visual Studio Team Services<span class=\"\"pop-out-icon\"\"></span></a>. We've had a good experience in starting projects quickly with Azure DevOps services—managing, building and releasing applications to <a href=\"\"https://www.thoughtworks.com/radar/platforms/azure\"\">Azure</a>. We've also run into a few challenges—such as lack of full support for CI and CD pipeline as code, slow build agent startup time, separation of build and release into different pipelines—and experienced a few downtimes. We're hoping that Azure DevOps services improve over time to provide a good developer experience when hosting applications on Azure, with a frictionless experience integrating with other Azure services.</p>\""
    },
    {
        "name": "CockroachDB",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://www.cockroachlabs.com/product/cockroachdb/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CockroachDB<span class=\"\"pop-out-icon\"\"></span></a></strong> is an open source distributed database inspired by the white paper <a href=\"\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/39966.pdf\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Spanner: Google's distributed database<span class=\"\"pop-out-icon\"\"></span></a>. In CockroachDB, data is automatically divided into ranges, usually 64MB, and distributed across nodes in the cluster. Each range has a consensus group and, because it uses the <a href=\"\"https://raft.github.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Raft consensus algorithm<span class=\"\"pop-out-icon\"\"></span></a>, the data is always kept in sync. With its unique design, CockroachDB provides distributed transactions and geo-partitioning while still supporting SQL. Unlike <a href=\"\"https://www.thoughtworks.com/radar/platforms/cloud-spanner\"\">Spanner</a>, which relies on <a href=\"\"https://cloud.google.com/spanner/docs/true-time-external-consistency\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">TrueTime<span class=\"\"pop-out-icon\"\"></span></a> with atomic clock for linearizability, CockroachDB uses <a href=\"\"https://en.wikipedia.org/wiki/Network_Time_Protocol\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">NTP<span class=\"\"pop-out-icon\"\"></span></a> for clock synchronization and provides serializability as the default isolation level. If you're working with structured data that fits in a single node, then choose a traditional relational database. However, if your data needs to scale across nodes, be consistent and survive failures, then we recommend you take a closer look at CockroachDB.</p>\""
    },
    {
        "name": "Debezium",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong>Debezium</strong> is a <a href=\"\"https://en.wikipedia.org/wiki/Change_data_capture\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">change data capture (CDC)<span class=\"\"pop-out-icon\"\"></span></a> platform that can stream database changes onto <a href=\"\"https://www.thoughtworks.com/radar/tools/apache-kafka\"\">Kafka</a> topics. CDC is a popular technique with multiple use cases, including replicating data to other databases, feeding analytics systems, extracting microservices from monoliths and invalidating caches. We're always on the lookout for tools or platforms in this space (we talked about <a href=\"\"https://www.thoughtworks.com/radar/tools/bottled-water\"\">Bottled Water</a> in a previous Radar) and Debezium is an excellent choice. It uses a log-based CDC approach which means it works by reacting to changes in the database's log files. Debezium uses Kafka Connect which makes it highly scalable and resilient to failures and has CDC connectors for multiple databases including Postgres, Mysql and MongoDB. We're using it in a few projects and it has worked very well for us.</p>\""
    },
    {
        "name": "Glitch",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We've been intrigued by <strong><a href=\"\"https://glitch.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Glitch<span class=\"\"pop-out-icon\"\"></span></a></strong>, which is a collaborative online development environment that lets you easily copy and adapt (or \"\"remix\"\") existing web apps or create your own. Rooted in the \"\"tinkerer\"\" ethos, it's ideal for people learning to code but it has the capability to support more complex applications. The main focus is on JavaScript and <a href=\"\"https://www.thoughtworks.com/radar/platforms/node-js\"\">Node.js</a>, but it also has limited support for other languages. With integrated live editing, hosting, sharing and automatic source versioning, Glitch offers a refreshing and distinctive take on collaborative programming.</p>\""
    },
    {
        "name": "Google Cloud Dataflow",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://cloud.google.com/dataflow/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Google Cloud Dataflow</strong><span class=\"\"pop-out-icon\"\"></span></a> is useful in traditional ETL scenarios for reading data from a source, transforming it and then storing it to a sink, with configurations and scaling being managed by dataflow. Dataflow supports Java, Python and Scala and provides wrappers for connections to various types of data sources. However, the current version won’t let you add additional libraries, which may make it unsuitable for certain data manipulations. You also can’t change the dataflow DAG dynamically. Hence, if your ETL has conditional execution flows based on parameters, you may not be able to use dataflow without workarounds.</p>\""
    },
    {
        "name": "gVisor",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://github.com/google/gvisor\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">gVisor<span class=\"\"pop-out-icon\"\"></span></a></strong> is a user-space kernel for containers. It limits the host kernel surface accessible to the application without taking away access to all the features it expects. Unlike existing sandbox technologies, such as virtualized hardware (<a href=\"\"https://www.linux-kvm.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">KVM<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://www.xenproject.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Xen<span class=\"\"pop-out-icon\"\"></span></a>) or rule-based execution (<a href=\"\"https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">seccomp<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://selinuxproject.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">SELinux<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://wiki.ubuntu.com/AppArmor\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">AppArmor<span class=\"\"pop-out-icon\"\"></span></a>), gVisor takes a distinct approach to container sandboxing by intercepting application system calls and acting as the guest kernel without the need for translation through virtualized hardware. gVisor includes an <a href=\"\"https://www.opencontainers.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Open Container Initiative (OCI)<span class=\"\"pop-out-icon\"\"></span></a> runtime called runsc that integrates with <a href=\"\"https://www.thoughtworks.com/radar/platforms/docker\"\">Docker</a> and provides experimental support for <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a>. gVisor is a relatively new project and we recommend assessing it for your container security landscape.</p>\""
    },
    {
        "name": "IPFS",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>In most cases, blockchain is not the right place to store a <a href=\"\"https://en.wikipedia.org/wiki/Binary_large_object\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">blob<span class=\"\"pop-out-icon\"\"></span></a> file (e.g., image or audio). When developing <a href=\"\"https://www.thoughtworks.com/radar/techniques/ethereum-for-decentralized-applications\"\">DApp</a>, one option is to put blob files in some off-chain centralized data storage, which usually signals lack of trust. Another option is to store them on InterPlanetary File System (<strong><a href=\"\"https://ipfs.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">IPFS<span class=\"\"pop-out-icon\"\"></span></a></strong>), which is a content-addressed, versioned, peer-to-peer file system. It’s designed to distribute high volumes of data with high efficiency and removed from any centralized authority. Files are stored on peers that don’t need to trust each other. IPFS keeps every version of a file so you never lose important files. We see IPFS as a good complement to blockchain technology. Beyond its blockchain application, IPFS has an ambitious goal to decentralize the Internet infrastructure.</p>\""
    },
    {
        "name": "Istio",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>When building and operating a <a href=\"\"https://martinfowler.com/articles/microservices.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">microservices<span class=\"\"pop-out-icon\"\"></span></a> ecosystem, one of the early questions to answer is how to implement cross-cutting concerns such as service discovery, service-to-service and origin-to-service security, observability (including telemetry and distributed tracing), rolling releases and resiliency. Over the last couple of years, our default answer to this question has been using a <a href=\"\"https://www.thoughtworks.com/radar/techniques/service-mesh\"\">service mesh</a> technique. A service mesh offers the implementation of these cross-cutting capabilities as an infrastructure layer that is configured as code. The policy configurations can be consistently applied to the whole ecosystem of microservices; enforced on both in and out of mesh traffic (via the mesh proxy as a gateway) as well as on the traffic at each service (via the same mesh proxy as a sidecar container). While we're keeping a close eye on the progress of different open source service mesh projects such as <a href=\"\"https://linkerd.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Linkerd<span class=\"\"pop-out-icon\"\"></span></a>, we've successfully used <strong><a href=\"\"https://istio.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Istio<span class=\"\"pop-out-icon\"\"></span></a></strong> in production with a surprisingly easy-to-configure operating model.</p>\""
    },
    {
        "name": "Knative",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>As application developers, we love to focus on solving core business problems and let the underlying platform handle the boring but difficult tasks of deploying, scaling and managing applications. Although <a href=\"\"https://www.thoughtworks.com/radar/techniques/serverless-architecture\"\">serverless architecture</a> is a step in that direction, most of the popular offerings are tied to a proprietary implementation, which means vendor lock-in. <a href=\"\"https://cloud.google.com/knative/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Knative</strong><span class=\"\"pop-out-icon\"\"></span></a> tries to address this by being an open source serverless platform that integrates well with the popular <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a> ecosystem. With Knative you can model computations on request in a supported framework of your choice (including Ruby on Rails, Django and Spring among others); subscribe, deliver and manage events; integrate with familiar CI and CD tools; and build containers from source. By providing a set of middleware components for building source-centric and container-based applications that can be elastically scaled, Knative is an attractive platform that deserves to be assessed for your serverless needs.</p>\""
    },
    {
        "name": "Pulumi",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We're quite interested in <a href=\"\"https://pulumi.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Pulumi</strong><span class=\"\"pop-out-icon\"\"></span></a>, a promising entrant in cloud infrastructure automation. Pulumi distinguishes itself by allowing configurations to be written in <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/typescript\"\">TypeScript</a>/JavaScript, <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/python-3\"\">Python</a>, and Go—no YAML required. Pulumi is tightly focused on cloud-native architectures—including containers, serverless functions and data services—and provides good support for Kubernetes.</p>\""
    },
    {
        "name": "Quorum",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://www.thoughtworks.com/radar/platforms/ethereum\"\">Ethereum</a> is the leading developer ecosystem in blockchain tech. We've seen emerging solutions that aim to spread this technology into enterprise environments that usually require network permissioning and transaction privacy as well as higher throughput and lower latency. <a href=\"\"https://www.jpmorgan.com/global/Quorum\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Quorum</strong><span class=\"\"pop-out-icon\"\"></span></a> is one of these solutions. Originally developed by J.P. Morgan, Quorum positions itself as \"\"an enterprise-focused version of Ethereum.\"\" Unlike the <a href=\"\"https://github.com/hyperledger/burrow\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Hyperledger Burrow<span class=\"\"pop-out-icon\"\"></span></a> node, which creates a new Ethereum virtual machine (EVM), Quorum forks code from Ethereum's official client so that it can evolve alongside Ethereum. Although it keeps most features of the Ethereum ledger, Quorum changes the consensus protocol from PoW to more efficient ones and adds private transaction support. With Quorum, developers can use their Ethereum knowledge of using, for example, <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/solidity\"\">Solidity</a> and <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/truffle\"\">Truffle</a> contracts to build enterprise blockchain applications. However, based on our experience, Quorum is not yet enterprise ready; for example, it lacks access control for private contracts, doesn't work well with load balancers and only has partial database support, all of which will lead to significant deployment and design burden. We recommend that you're cautious in implementing Quorum while keeping an eye on its development.</p>\""
    },
    {
        "name": "Resin.io",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://resin.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Resin.io<span class=\"\"pop-out-icon\"\"></span></a></strong> is an Internet of Things (IoT) platform that does one thing and does it well: it deploys containers onto devices. Developers use a software as a service (SaaS) portal to manage devices and assign applications, defined by Dockerfiles, to them. The platform can build containers for various hardware types and deploys the images over the air. For the containers, Resin.io uses <a href=\"\"https://www.balena.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">balena<span class=\"\"pop-out-icon\"\"></span></a>, an engine based on the Moby framework created by <a href=\"\"https://www.thoughtworks.com/radar/platforms/docker\"\">Docker</a>. The platform is still under development, has some rough edges and lacks some features (e.g., working with private registries), but the current feature set, including the option to ssh into a container on a device from the web portal, points toward a promising future.</p>\""
    },
    {
        "name": "Rook",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://rook.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Rook<span class=\"\"pop-out-icon\"\"></span></a></strong> is an open source cloud native storage orchestrator for <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a>. Rook integrates with <a href=\"\"https://www.thoughtworks.com/radar/platforms/ceph\"\">Ceph</a> and brings File, Block and Object storage systems into the Kubernetes cluster, running them seamlessly alongside other applications and services that are consuming the storage. By using Kubernetes operators, Rook orchestrates Ceph at the control plane and stays clear of the data path between applications and Ceph. Storage is one of the important components of cloud-native computing and we believe that Rook, though still an incubating-level project at <a href=\"\"https://www.cncf.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CNCF<span class=\"\"pop-out-icon\"\"></span></a>, takes us a step closer to self-sufficiency and portability across public cloud and on-premise deployments.</p>\""
    },
    {
        "name": "SPIFFE",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Making key elements of Google's groundbreaking, high-scale platform available as open source offerings appears to have become a trend. In the same way that HBASE drew on BigTable and <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a> drew on Borg, <a href=\"\"https://spiffe.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>SPIFFE</strong><span class=\"\"pop-out-icon\"\"></span></a> is now drawing upon Google's LOAS to bring to life a critical cloud-native concept called workload identity. The SPIFFE standards are backed by the OSS <a href=\"\"https://github.com/spiffe/spire\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">SPIFFE Runtime Environment (SPIRE)<span class=\"\"pop-out-icon\"\"></span></a>, which automatically delivers cryptographically provable identities to software workloads. Although SPIRE isn't quite ready for production use, we see tremendous value in a platform-agnostic way to make strong identity assertions between workloads in modern, distributed IT infrastructures. SPIRE supports many use cases, including identity translation, OAuth client authentication, mTLS \"\"encryption everywhere,\"\" and workload observability. <a href=\"\"https://www.thoughtworks.com/radar/platforms/istio\"\">Istio</a> uses SPIFFE by default.</p>\""
    },
    {
        "name": "Data-hungry packages",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong>Data-hungry packages</strong> are solutions that require absorption of data into themselves in order to function. In some cases they may even require that they become the \"\"master\"\" for that data. Once the data is owned by the package, that software becomes the only way to update, change or access the data. The data-hungry package might solve a particular business problem such as ERP. However, inventory or finance \"\"data demands\"\" placed upon an organization will often require complex integration and changes to systems that lie well outside of the original scope.</p>\""
    },
    {
        "name": "Low-code platforms",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong>Low-code platforms</strong> use graphical user interfaces and configuration in order to create applications. Unfortunately, low-code environments are promoted with the idea that this means you no longer need skilled development teams. Such suggestions ignore the fact that writing code is just a small part of what needs to happen to create high-quality software—practices such as source control, testing and careful design of solutions are just as important. Although these platforms have their uses, we suggest approaching them with caution, especially when they come with extravagant claims for lower cost and higher productivity.</p>\""
    },
    {
        "name": "acs-engine",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Azure Container Service Engine (<a href=\"\"https://github.com/Azure/acs-engine\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>acs-engine</strong><span class=\"\"pop-out-icon\"\"></span></a>) is an Azure Resource Manager (ARM) template generator. The required configurations of the cluster are defined in a JSON file; acs-engine reads these <a href=\"\"https://github.com/Azure/acs-engine/blob/master/docs/clusterdefinition.md\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">cluster definitions<span class=\"\"pop-out-icon\"\"></span></a> and generates a number of files that can be consumed by ARM. The tool also provides flexibility to choose different orchestrators—including <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a>, <a href=\"\"https://dcos.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">DC/OS<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://www.openshift.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">OpenShift<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://docs.docker.com/engine/swarm/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Swarm mode<span class=\"\"pop-out-icon\"\"></span></a> and Swarm—and to configure features and agents of the cluster. We’ve been using acs-engine in a number of projects and would recommend it for managing clusters in Azure Container Service.</p>\""
    },
    {
        "name": "Archery",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We're seeing significant advances in security tooling integration with modern software delivery processes. <a href=\"\"https://archerysec.info/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Archery</strong><span class=\"\"pop-out-icon\"\"></span></a> is an open source tool with an active community that's doing a good job of pulling together a collection of other tools, including <a href=\"\"https://www.thoughtworks.com/radar/tools/zap\"\">Zap</a>. Designed primarily for web applications, Archery makes it easy to integrate security tooling into your build and deployment systems. Its dashboards also let you track vulnerabilities as well as application and network scans.</p>\""
    },
    {
        "name": "ArchUnit",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p><a href=\"\"http://www.archunit.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>ArchUnit</strong><span class=\"\"pop-out-icon\"\"></span></a> is a Java testing library for checking architecture characteristics such as package and class dependencies, annotation verification and even layer consistency. We like that it runs as unit tests within your existing test setup, even though it supports only Java-based architectures. The ArchUnit test suite can be incorporated into a CI environment or a deployment pipeline, making it easier to implement <a href=\"\"https://www.thoughtworks.com/radar/techniques/architectural-fitness-function\"\">fitness functions</a> in an <a href=\"\"http://evolutionaryarchitecture.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">evolutionary architecture<span class=\"\"pop-out-icon\"\"></span></a> way.</p>\""
    },
    {
        "name": "Cypress",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p>Running end-to-end tests can present challenges, such as the long duration of the running process, the flakiness of some tests and the challenges of fixing failures in CI when running tests in headless mode. Our teams have had very good experiences with <a href=\"\"http://www.cypress.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Cypress</strong><span class=\"\"pop-out-icon\"\"></span></a> by solving common issues such as lack of performance and long wait time for responses and resources to load. Cypress is a useful tool that helps developers build end-to-end tests and records all test steps as a video in an MP4 file to make it easier to identify errors.</p>\""
    },
    {
        "name": "git-secrets",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Security continues to be paramount, and inadvertently checking credentials and other secrets into source control is a major attack vector. <a href=\"\"https://github.com/awslabs/git-secrets\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>git-secrets</strong><span class=\"\"pop-out-icon\"\"></span></a> is a simple tool that prevents you from committing passwords and other sensitive information to a git repository. It can also scan all historical revisions before making a repository public, if you want to ensure you've never accidentally checked in a credential. git-secrets comes with built-in support for common <a href=\"\"https://www.thoughtworks.com/radar/platforms/aws\"\">AWS</a> keys and credentials and can be set up quickly for other providers too.</p>\""
    },
    {
        "name": "Headless Firefox",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p><a href=\"\"http://developer.mozilla.org/en-US/Firefox/Headless_mode\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Headless Firefox</strong><span class=\"\"pop-out-icon\"\"></span></a> has the same maturity as that of <a href=\"\"https://www.thoughtworks.com/radar/tools/headless-chrome-for-front-end-test\"\">Headless Chrome for front-end test</a>. Similar to Headless Chrome, with Firefox in headless mode we now get to enjoy browser tests without the visible UI components, executing the UI tests suite much faster.</p>\""
    },
    {
        "name": "LocalStack",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>One of the challenges of using cloud services is being able to develop and test locally using those services. <a href=\"\"https://github.com/localstack/localstack\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>LocalStack</strong><span class=\"\"pop-out-icon\"\"></span></a> solves this problem for <a href=\"\"https://www.thoughtworks.com/radar/platforms/aws\"\">AWS</a> by providing local <a href=\"\"https://martinfowler.com/bliki/TestDouble.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">test double<span class=\"\"pop-out-icon\"\"></span></a> implementations of a wide range of AWS services, including S3, Kinesis, DynamoDB and Lambda. It builds on top of existing best-of-breed tools such as <a href=\"\"https://github.com/mhart/kinesalite\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Kinesalite<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://github.com/mhart/dynalite\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Dynalite<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://github.com/spulec/moto\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Moto<span class=\"\"pop-out-icon\"\"></span></a> and adds isolated processes and error injection functionality. LocalStack is very easy to use and ships with a simple JUnit runner and a JUnit 5 extension. We're using it in a few of our projects and have been impressed with it.</p>\""
    },
    {
        "name": "Mermaid",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://mermaidjs.github.io\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Mermaid<span class=\"\"pop-out-icon\"\"></span></a></strong> lets you generate diagrams from a markdown-like markup language. Born out of need to simplify documentation, Mermaid has grown into a larger ecosystem with plugins for <a href=\"\"https://marketplace.atlassian.com/apps/1214124/mermaid-plugin-for-confluence?hosting=server&amp;tab=overview\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Confluence<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://marketplace.visualstudio.com/items?itemName=vstirbu.vscode-mermaid-preview\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Visual Studio Code<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://rubygems.org/gems/jekyll-mermaid/versions/1.0.0\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Jekyll<span class=\"\"pop-out-icon\"\"></span></a> to name a few. To see how it works, you can use the <a href=\"\"https://mermaidjs.github.io/mermaid-live-editor/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Live Editor<span class=\"\"pop-out-icon\"\"></span></a> on GitHub. Mermaid also has a convenient command line interface that lets you generate SVG, PNG and PDF files as output from definition files. We've been using Mermaid in many projects and we like the simplicity of describing graphs and flowcharts with markdown and checking in the definition files with the code repository.</p>\""
    },
    {
        "name": "Prettier",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://prettier.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Prettier<span class=\"\"pop-out-icon\"\"></span></a></strong> is an opinionated, automated code formatter for JavaScript (with growing support for other languages). By enforcing its own opinionated formatting style it increases consistency and readability and reduces developer effort both on formatting and engaging in wasteful team debates about code style. Even though you may disagree with the stylistic choices enforced by Prettier, we find that the benefits to the team generally outweigh small style issues. Prettier can be used with a precommit hook or an IDE plugin. As with any formatter, a one-time reformatting of your codebase can confuse your version control history, but we feel that's a minor drawback. We particularly like the way Prettier flips the linter-based approach and, borrowing from <a href=\"\"https://golang.org/cmd/gofmt/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">gofmt<span class=\"\"pop-out-icon\"\"></span></a>, instead of validating your code, it ensures that your code will always be valid.</p>\""
    },
    {
        "name": "Rider",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We've covered <a href=\"\"https://www.thoughtworks.com/radar/tools/visual-studio-code\"\">Visual Studio Code</a> in the Radar since 2015, but it isn't the only cross-platform .NET Core IDE kid on the block anymore. Recently, <a href=\"\"https://www.jetbrains.com/rider/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Rider</strong><span class=\"\"pop-out-icon\"\"></span></a>, which is part of the IDEA platform developed by JetBrains, has gained adoption, especially by those used to the speed and dexterity provided by <a href=\"\"https://www.jetbrains.com/resharper/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">ReSharper<span class=\"\"pop-out-icon\"\"></span></a>, which drives the refactoring in Rider. Rider, however, does more than ReSharper to bring the full IDEA platform to .NET and increase developer productivity. Regardless of your preferred platform, it's worth exploring Rider as it currently has the productivity edge on Visual Studio Code. It's also great to see the ecosystem alive and well, as competition ensures these tools continue to improve.</p>\""
    },
    {
        "name": "Snyk",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://snyk.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Snyk<span class=\"\"pop-out-icon\"\"></span></a></strong> helps you find, fix and monitor known vulnerabilities in npm, Ruby, Python, Scala, Golang, .NET, PHP, Java and Docker dependency trees. When added to your build pipeline, Snyk continuously monitors and tests the library dependency tree against a hosted vulnerability database and suggests the minimal direct dependency version upgrade needed for remediation.</p>\""
    },
    {
        "name": "UI dev environments",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>As more and more teams embrace <a href=\"\"https://www.thoughtworks.com/radar/techniques/designops\"\">DesignOps</a>, practices and tooling in this space mature, too. Many of our teams now work with what could be called <strong>UI dev environments</strong> , which provide a comprehensive environment for quickly iterating on UI components, focusing on collaboration between user experience designers and developers. We now have a few options in this space: <a href=\"\"https://storybook.js.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Storybook<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://react-styleguidist.js.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">react-styleguidist<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://github.com/c8r\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Compositor<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://mdxjs.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">MDX<span class=\"\"pop-out-icon\"\"></span></a>. You can use these tools standalone in component library or design system development as well as embedded in a web application project. Rather than spinning up the app, plus a <a href=\"\"https://www.thoughtworks.com/radar/techniques/bff-backend-for-frontends\"\">BFF</a>, plus services simply to add a feature to a component, you can start up the Storybook dev server instead.</p>\""
    },
    {
        "name": "Visual Studio Code",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p><strong><a href=\"\"https://code.visualstudio.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Visual Studio Code<span class=\"\"pop-out-icon\"\"></span></a></strong> is Microsoft's free IDE editor, available across platforms. We've had good experience using this for front-end development using React and <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/typescript\"\">TypeScript</a>, and back-end languages such as GoLang, without having to switch between different editors. The tooling, language support and extensions for Visual Studio Code continue to soar and get better. We'd particularly like to call out <a href=\"\"https://www.thoughtworks.com/radar/tools/visual-studio-live-share\"\">Visual Studio Live Share</a> for real-time collaboration and remote pairing. While complex projects in statically typed languages, such as Java, .NET or C++, will likely find better support from the more mature IDEs from Microsoft or Jetbrains, we find that Visual Studio Code is increasingly becoming a tool of choice among infrastructure and front-end development teams.</p>\""
    },
    {
        "name": "Visual Studio Live Share",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Visual Studio Live Share<span class=\"\"pop-out-icon\"\"></span></a></strong> is a suite of extensions for <a href=\"\"https://www.thoughtworks.com/radar/tools/visual-studio-code\"\">Visual Studio Code</a> and Visual Studio. The real-time collaboration for editing and debugging of code, voice calls, sharing a terminal and exposing local ports have reduced some of the obstacles we'd otherwise encounter when pairing remotely. In particular, we like that Live Share allows developers to collaborate with each other, while continuing to use their preconfigured editor, which includes themes, key maps and extensions.</p>\""
    },
    {
        "name": "Bitrise",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Building, testing and deploying mobile applications entails a number of complex steps, especially when we consider a pipeline from source code repositories to app stores. All these steps can be automated with scripts and build pipelines in generic CI/CD tools. However, for teams that focus on mobile development, and have little or no requirement to integrate with build pipelines for back-end systems, a domain-specific tool can reduce the complexity and maintenance overhead. <a href=\"\"https://www.bitrise.io\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Bitrise</strong><span class=\"\"pop-out-icon\"\"></span></a> is easy to set up and provides a comprehensive set of prebuilt steps for most mobile development needs.</p>\""
    },
    {
        "name": "Codefresh",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://codefresh.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Codefresh</strong><span class=\"\"pop-out-icon\"\"></span></a> is a hosted CI server similar to <a href=\"\"https://www.thoughtworks.com/radar/tools/circleci\"\">CircleCI</a> or <a href=\"\"https://www.thoughtworks.com/radar/tools/buildkite\"\">Buildkite</a>. It's container-centric, making Dockerfiles and container-hosting clusters first-class entities. We like that the tool encourages a pipelined delivery approach and supports branching and merging. Early reports from our teams are positive, but we've yet to see how it works for larger projects and complex pipelines.</p>\""
    },
    {
        "name": "Grafeas",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We're continually on the lookout for tools and techniques that allow delivery teams to work independently from the rest of a larger organization while staying within its security and risk guardrails. <strong><a href=\"\"https://github.com/grafeas/grafeas\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Grafeas<span class=\"\"pop-out-icon\"\"></span></a></strong> is such a tool. It lets organizations publish authoritative metadata about software artifacts—Docker images, libraries, packages—that is then accessible from build scripts or other automated compliance controls. The access control mechanisms allow for a separation of responsibility between the teams that publish approvals or vulnerabilities and the teams that build and deploy software. Although several organizations, including Google and JFrog, use Grafeas in their workflows, note that the tool is still in alpha.</p>\""
    },
    {
        "name": "Heptio Ark",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://github.com/heptio/ark\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Heptio Ark<span class=\"\"pop-out-icon\"\"></span></a></strong> is a tool for managing disaster recovery for <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a> clusters and persistent volumes. Ark is easy to use and configure and lets you back up and restore your clusters through a series of checkpoints. With Ark you can significantly reduce recovery time in case of an infrastructure failure, easily migrate Kubernetes resources from one cluster to another and replicate the production environment for testing and troubleshooting. Ark supports key backup <a href=\"\"https://github.com/heptio/ark/blob/master/docs/support-matrix.md\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">storage providers<span class=\"\"pop-out-icon\"\"></span></a> (including AWS, Azure and Google Cloud) and, as of version 0.6.0, a plugin system that adds compatibility for additional backup and volume storage platforms. Managed Kubernetes environments, such as <a href=\"\"https://www.thoughtworks.com/radar/platforms/gke\"\">GKE</a>, provide these services out of the box. However, if you're operating Kubernetes either on premise or in the cloud, take a closer look at Heptio Ark for disaster recovery.</p>\""
    },
    {
        "name": "Jaeger",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://github.com/jaegertracing/jaeger\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Jaeger<span class=\"\"pop-out-icon\"\"></span></a></strong> is an open source distributed tracing system. Similar to <a href=\"\"https://www.thoughtworks.com/radar/tools/zipkin\"\">Zipkin</a>, it's been inspired by the Google <a href=\"\"https://ai.google/research/pubs/pub36356\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Dapper<span class=\"\"pop-out-icon\"\"></span></a> paper and complies with <a href=\"\"https://opentracing.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">OpenTracing<span class=\"\"pop-out-icon\"\"></span></a>. Jaeger is a younger open source project than Zipkin, but it's gained popularity quickly due to a larger number of supported languages for the client libraries and easy installation on <a href=\"\"https://www.thoughtworks.com/radar/platforms/kubernetes\"\">Kubernetes</a>. We've used Jaeger successfully with <a href=\"\"https://www.thoughtworks.com/radar/platforms/istio\"\">Istio</a>, integrating application traces with <a href=\"\"https://www.envoyproxy.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Envoy<span class=\"\"pop-out-icon\"\"></span></a> on Kubernetes, and like its <a href=\"\"https://github.com/jaegertracing/jaeger-ui\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">UI<span class=\"\"pop-out-icon\"\"></span></a>. With Jaeger joining <a href=\"\"https://www.cncf.io/blog/2017/09/13/cncf-hosts-jaeger/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CNCF<span class=\"\"pop-out-icon\"\"></span></a>, we anticipate a larger community engagement effort and deeper integration with other CNCF projects.</p>\""
    },
    {
        "name": "kube-bench",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://github.com/aquasecurity/kube-bench\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>kube-bench</strong><span class=\"\"pop-out-icon\"\"></span></a> is an example of an <a href=\"\"https://www.thoughtworks.com/radar/techniques/infrastructure-configuration-scanner\"\">infrastructure configuration scanner</a> that automates checking your Kubernetes configuration against the <a href=\"\"https://www.cisecurity.org/benchmark/kubernetes/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CIS benchmark for K8s<span class=\"\"pop-out-icon\"\"></span></a>. It covers user authentication, permissions and secure data among other areas. Our teams have found kube-bench valuable in the identification of vulnerable configurations.</p>\""
    },
    {
        "name": "Ocelot",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"http://threemammals.com/ocelot\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Ocelot</strong><span class=\"\"pop-out-icon\"\"></span></a> is a .NET API gateway. After three years of development, Ocelot has built a relatively complete feature set and an active community. Although there is no dearth of excellent API gateways (e.g., <a href=\"\"https://www.thoughtworks.com/radar/tools/kong-api-gateway\"\">Kong</a>), the .NET community appears to prefer Ocelot when building microservices. Part of the reason is that Ocelot integrates well with the .NET ecosystem (e.g., with IdentityServer). Another reason may be that the .NET community has extended Ocelot to support communication protocols such as gRPC, Orleans and WebSocket.</p>\""
    },
    {
        "name": "Optimal Workshop",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>UX research demands data collection and analysis to make better decisions about the products we need to build. <a href=\"\"https://www.optimalworkshop.com\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Optimal Workshop</strong><span class=\"\"pop-out-icon\"\"></span></a> is a suite of tools that helps to do this digitally. Features such as first-click or card sorting help to both validate prototypes and improve website navigation and information display. For distributed teams, in particular, benefit from Optimal Workshop as it lets them conduct remote research.</p>\""
    },
    {
        "name": "Stanford CoreNLP",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We have more and more projects that require unstructured data processing. To extract meaningful business information from text data is a key technique. <a href=\"\"https://stanfordnlp.github.io/CoreNLP/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Stanford CoreNLP</strong><span class=\"\"pop-out-icon\"\"></span></a> is a Java-based set of natural language processing tools. It supports named-entity recognition, relationship extraction, sentiment analysis and text classification as well as multiple languages, including English, Chinese and Arabic. We also find tools usable to label corpus and training models for our scenario. With Stanford CoreNLP, we were able to use the latest research in the field of NLP to solve various business problems.</p>\""
    },
    {
        "name": "Terragrunt",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We widely use <a href=\"\"https://www.thoughtworks.com/radar/tools/terraform\"\">Terraform</a> as code to configure a cloud infrastructure. <strong><a href=\"\"https://github.com/gruntwork-io/terragrunt\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Terragrunt<span class=\"\"pop-out-icon\"\"></span></a></strong> is a thin wrapper for Terraform that implements the practices advocated by the <a href=\"\"https://www.oreilly.com/library/view/terraform-up-and/9781491977071/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Terraform: Up and Running<span class=\"\"pop-out-icon\"\"></span></a> book. We've found Terragrunt helpful as it encourages versioned modules and reusability for different environments with some handy features, including recursive code execution in subdirectories. We'd like to see the tool evolve to support CD practices natively, where all code can be packaged, versioned and reused across different environments on CD pipelines. Our team achieves this today with workarounds.</p>\""
    },
    {
        "name": "TestCafe",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Our teams are reporting good success with <strong><a href=\"\"https://devexpress.github.io/testcafe/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">TestCafe<span class=\"\"pop-out-icon\"\"></span></a></strong>, a JavaScript-based browser test automation tool. TestCafe allows you to write tests in JavaScript or <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/typescript\"\">TypeScript</a> and runs tests in any browser that supports JavaScript. TestCafe has several useful features including out-of-the-box parallel execution and HTTP request mocking. TestCafe uses an asynchronous execution model with no explicit wait times, which results in much more stable test suites.</p>\""
    },
    {
        "name": "Traefik",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://traefik.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Traefik</strong><span class=\"\"pop-out-icon\"\"></span></a> is an open-source reverse proxy and load balancer. If you're looking for an edge proxy that provides simple routing without all the features of <a href=\"\"https://nginx.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">NGINX<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://haproxy.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">HAProxy<span class=\"\"pop-out-icon\"\"></span></a>, Traefik is a good choice. The router provides a reload-less reconfiguration, metrics, monitoring and circuit breakers that are essential when running microservices. It also integrates nicely with <a href=\"\"https://www.thoughtworks.com/radar/tools/let-s-encrypt\"\">Let's Encrypt</a> to provide SSL termination. When compared to Traefik, tools such as NGINX and HAProxy may require additional tooling to templatize configuration in response to scaling, adding or removing microservices and may, at times, require a restart which can be annoying in production environments.</p>\""
    },
    {
        "name": "Wallaby.js",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We all obsess about fast feedback during test-driven development and we're always looking for new ways to make this even faster. <a href=\"\"https://wallabyjs.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Wallaby.js</strong><span class=\"\"pop-out-icon\"\"></span></a> is a commercial extension for popular editors that provides continuous execution of JavaScript unit tests, highlighting the results in line next to your code. The tool identifies and runs the minimum set of tests affected by each code change and lets you run tests continuously as you type.</p>\""
    },
    {
        "name": "Jepsen",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p>With the increased adoption of a <a href=\"\"https://martinfowler.com/microservices/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">microservices<span class=\"\"pop-out-icon\"\"></span></a> architecture, we're building more distributed applications than before. Although there are many benefits of a decoupled architecture, the complexity and the effort involved in proving the correctness of the overall system has dramatically increased. <a href=\"\"https://github.com/aphyr/jepsen\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Jepsen</strong><span class=\"\"pop-out-icon\"\"></span></a> provides much needed tooling to verify correctness in coordination of task schedulers, test eventual consistency, <a href=\"\"https://jepsen.io/consistency/models/linearizable\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">linearizability<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://jepsen.io/consistency/models/serializable\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">serializability<span class=\"\"pop-out-icon\"\"></span></a> characteristics of distributed databases. We've used Jepsen in a few projects and we like the fact that we can test drive configurations, inject and correct faults, and verify the state of the system after recovery.</p>\""
    },
    {
        "name": "MMKV",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>An open source framework developed by <a href=\"\"https://www.thoughtworks.com/radar/platforms/wechat\"\">WeChat</a>, <strong><a href=\"\"https://github.com/Tencent/MMKV\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">MMKV<span class=\"\"pop-out-icon\"\"></span></a></strong> provides fast key-value storage for mobile apps. It uses iOS memory-mapping features to avoid the need to explicitly save changes and is extremely fast and performant. In the event of an unexpected crash, MMKV allows the app to restore the data quickly.</p>\""
    },
    {
        "name": "MockK",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://mockk.io\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>MockK</strong><span class=\"\"pop-out-icon\"\"></span></a> is a library for mocking written in <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/kotlin\"\">Kotlin</a>. Its main philosophy is to provide first-class support for Kotlin language features such as <a href=\"\"https://kotlinlang.org/docs/reference/coroutines-overview.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Coroutines<span class=\"\"pop-out-icon\"\"></span></a> or lambda blocks. As a native library, it helps our teams to write clean and concise code on testing Kotlin applications instead of using incommodious wrappers of Mockito or PowerMock.</p>\""
    },
    {
        "name": "TypeScript",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"<p><strong><a href=\"\"https://www.typescriptlang.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">TypeScript<span class=\"\"pop-out-icon\"\"></span></a></strong> is a carefully considered language and its consistently improving tools and IDE support continues to impress us. With a <a href=\"\"https://definitelytyped.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">good repository<span class=\"\"pop-out-icon\"\"></span></a> of TypeScript-type definitions, we benefit from all the rich JavaScript libraries while gaining type safety. This is particularly important as our browser-based code base continues to grow. The type safety in TypeScript lets you use IDEs and other tools to provide deeper context into your code and make changes and refactor code with safety. TypeScript, being a superset of JavaScript, and documentation and the community has helped ease the learning curve.</p>\""
    },
    {
        "name": "Apache Beam",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><strong><a href=\"\"https://beam.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Apache Beam<span class=\"\"pop-out-icon\"\"></span></a></strong> is an open source unified programming model for defining and executing both batch and streaming data-parallel processing pipelines. Beam provides a portable API layer for describing these pipelines independent of execution engines (or runners) such as <a href=\"\"https://spark.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Apache Spark<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://flink.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Apache Flink<span class=\"\"pop-out-icon\"\"></span></a> or <a href=\"\"https://www.thoughtworks.com/radar/platforms/google-cloud-dataflow\"\">Google Cloud Dataflow</a>. Different runners have different capabilities and providing a portable API is a difficult task. Beam tries to strike a delicate balance by actively pulling innovations from these runners into the Beam model and also working with the community to influence the roadmap of these runners. Beam has a rich set of <a href=\"\"http://beam.apache.org/documentation/io/built-in/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">built-in I/O transformations<span class=\"\"pop-out-icon\"\"></span></a> that cover most of the data pipeline needs and it also provides a mechanism to implement <a href=\"\"http://beam.apache.org/documentation/io/authoring-overview/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">custom transformations<span class=\"\"pop-out-icon\"\"></span></a> for specific use cases. The portable API and extensible IO transformations make a compelling case for assessing Apache Beam for data pipeline needs.</p>\""
    },
    {
        "name": "Camunda",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>We tend to be quite skeptical of business process model and notation (BPMN) tools in general as they're often associated with low-code environments and their downsides. Although the OSS BPMN framework <strong><a href=\"\"https://camunda.com/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Camunda<span class=\"\"pop-out-icon\"\"></span></a></strong> provides some of this whizziness, it also offers workflow and decision engines that can be directly integrated as a library in your Java code. This makes it easy to test, version and refactor workflows. Camunda also integrates with Spring and Spring Boot, among other frameworks, making it a solid choice.</p>\""
    },
    {
        "name": "Flutter",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p><a href=\"\"http://flutter.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Flutter</strong><span class=\"\"pop-out-icon\"\"></span></a> is a cross-platform framework that enables you to write native mobile apps in <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/google-dart\"\">Dart</a>. It benefits from Dart and can be compiled into native code and communicates with the target platform without bridge and context switching—something that can cause performance bottlenecks in frameworks such as <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/react-native\"\">React Native</a> or <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/weex\"\">Weex</a>. Flutter's hot-reload feature is impressive and provides superfast visual feedback when editing code. Currently, Flutter is still in beta, but we'll continue keeping an eye on it to see how its ecosystem matures.</p>\""
    },
    {
        "name": "Ktor",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/kotlin\"\">Kotlin</a> is no longer just a great fit for mobile app development. New tools and frameworks have emerged that demonstrate the value of the language for web application development as well. <strong><a href=\"\"https://ktor.io\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Ktor<span class=\"\"pop-out-icon\"\"></span></a></strong> is one such framework. In contrast to other web frameworks that support Kotlin, Ktor is written in Kotlin, using language features such as <a href=\"\"https://kotlinlang.org/docs/reference/coroutines-overview.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">coroutines<span class=\"\"pop-out-icon\"\"></span></a> which allows for an asynchronous non-blocking implementation. The flexibility to incorporate different tools for logging, DI or a templates engine—in addition to its lightweight architecture—makes Ktor an interesting option for our teams for creating RESTful services.</p>\""
    },
    {
        "name": "Nameko",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>One insight we gained after talking with our teams is that <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/python-3\"\">Python</a> is making a comeback across many technology domains. In fact, it's well on its way to become the <a href=\"\"https://spectrum.ieee.org/at-work/innovation/the-2018-top-programming-languages\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">most-used programming language<span class=\"\"pop-out-icon\"\"></span></a>. In part, this is driven by its adoption by data scientists and in machine learning, but we also see teams adopting it to build microservices. <a href=\"\"https://www.nameko.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Nameko</strong><span class=\"\"pop-out-icon\"\"></span></a> is a super-lightweight microservices framework and an alternative to <a href=\"\"http://flask.pocoo.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Flask<span class=\"\"pop-out-icon\"\"></span></a> for writing services. Unlike Flask, Nameko only has a limited set of features that includes WebSocket, HTTP and AMQP support. We also like its focus on testability. If you don't need features such as templating that Flask provides, then Nameko is worth a look.</p>\""
    },
    {
        "name": "Polly.js",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"https://netflix.github.io/pollyjs/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Polly.js</strong><span class=\"\"pop-out-icon\"\"></span></a> is a simple tool that helps teams test JavaScript websites and applications. Our teams particularly like that it enables them to intercept and stub HTTP interactions which allows for easier and faster testing of JavaScript code without having to spin up dependent services or components.</p>\""
    },
    {
        "name": "PredictionIO",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p><a href=\"\"http://predictionio.apache.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>PredictionIO</strong><span class=\"\"pop-out-icon\"\"></span></a> is an open source machine-learning server. Developers and data scientists can use it to build intelligent applications for prediction. Like all intelligent applications, PredictionIO has three parts: data collection and storage, model training, and model deployment and expose service. Developers could focus on implementing data-processing logic, model algorithm and prediction logic based on the corresponding interfaces and liberate themselves from data storage and model training deployment. In our experience, PredictionIO can support both small and large volumes of data with low concurrency. We mostly use PredictionIO to build predictive services for small and medium-sized enterprises or as a proof of concept when building more complex, customized prediction engines.</p>\""
    },
    {
        "name": "Puppeteer",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>In the previous Radar we mentioned <a href=\"\"https://www.thoughtworks.com/radar/tools/headless-chrome-for-front-end-test\"\">Headless Chrome for front-end test</a>. With the adoption of <a href=\"\"http://devtools.chrome.com\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Chrome DevTools Protocol<span class=\"\"pop-out-icon\"\"></span></a> (CDP) by other browsers a new set of libraries is emerging for browser automation and testing. CDP allows for fine-grained control over the browser even in headless mode. New high-level libraries are being created using CDP for testing and automation. <strong><a href=\"\"https://pptr.dev\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Puppeteer<span class=\"\"pop-out-icon\"\"></span></a></strong> is one of these new libraries. It can drive headless Chrome through a single-page application, obtain time-trace for performance diagnostics and more. Our teams found it faster and also more flexible than alternatives based on WebDriver.</p>\""
    },
    {
        "name": "Q#",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Quantum computing currently exists in a twilight zone of being available for testing without having arrived yet. While we're still waiting for the hardware to arrive, we can experiment with and learn from languages and simulators. Although IBM and others have been making good progress, we've paid particular attention to Microsoft's efforts based around the <a href=\"\"https://docs.microsoft.com/en-us/quantum/quantum-qr-intro?view=qsharp-preview\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Q#</strong><span class=\"\"pop-out-icon\"\"></span></a> language and its simulator (32 qubits locally and 40 on Azure). If you want to start wrapping your head around the potential future of programming, check out their set of <a href=\"\"https://github.com/Microsoft/Quantum\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">samples on GitHub<span class=\"\"pop-out-icon\"\"></span></a>.</p>\""
    },
    {
        "name": "SAFE stack",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>The <strong>SAFE stack</strong> —short for <a href=\"\"https://suave.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Suave<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"https://azure.microsoft.com\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Azure<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"http://fable.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Fable<span class=\"\"pop-out-icon\"\"></span></a>, and <a href=\"\"https://github.com/elmish/elmish\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Elmish<span class=\"\"pop-out-icon\"\"></span></a>—brings a number of technologies into a coherent stack for web development. It's built around the F# programming language, both on the server side and in the browser, and therefore has a focus on functional, type-safe programming with an asynchronous approach. It offers productivity features such as hot reloading and lets you substitute parts of the stack, for example, the server-side web framework or the cloud provider.</p>\""
    },
    {
        "name": "Spek",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>The adoption of a new language typically spawns the emergence of new tools that support mature engineering practices such as test automation. <a href=\"\"https://www.thoughtworks.com/radar/languages-and-frameworks/kotlin\"\">Kotlin</a> is no exception. <a href=\"\"https://spekframework.org\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>Spek</strong><span class=\"\"pop-out-icon\"\"></span></a> is a testing framework—inspired by well-known tools such as <a href=\"\"https://cucumber.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Cucumber<span class=\"\"pop-out-icon\"\"></span></a>, <a href=\"\"http://rspec.info/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">RSpec<span class=\"\"pop-out-icon\"\"></span></a> and <a href=\"\"https://jasmine.github.io/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Jasmine<span class=\"\"pop-out-icon\"\"></span></a>—that writes tests in Gherkin and Specification, allowing teams to bring mature practices such as <a href=\"\"https://dannorth.net/introducing-bdd\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">behaviour-driven development<span class=\"\"pop-out-icon\"\"></span></a> into the Kotlin space.</p>\""
    },
    {
        "name": "troposphere",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p>We're trying out <a href=\"\"http://github.com/cloudtools/troposphere\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>troposphere</strong><span class=\"\"pop-out-icon\"\"></span></a> as a way of defining the <a href=\"\"https://www.thoughtworks.com/radar/tools/infrastructure-as-code\"\">infrastructure as code</a> on AWS for our projects that use <a href=\"\"http://aws.amazon.com/cloudformation/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">AWS<span class=\"\"pop-out-icon\"\"></span></a> <a href=\"\"http://aws.amazon.com/cloudformation/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">CloudFormation<span class=\"\"pop-out-icon\"\"></span></a> instead of <a href=\"\"https://www.thoughtworks.com/radar/tools/terraform\"\">Terraform</a>. troposphere is a Python library that allows us to write Python code to generate CloudFormation JSON descriptions. What we like about troposphere is that it facilitates catching JSON errors early, applying type checking, and unit testing and DRY composition of AWS resources.</p>\""
    },
    {
        "name": "WebAssembly",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"<p><a href=\"\"http://webassembly.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>WebAssembly</strong><span class=\"\"pop-out-icon\"\"></span></a> is a big step forward in the capabilities of the browser as a code execution environment. Supported by all major browsers and backward compatible, it's a binary compilation format designed to run in the browser at near native speeds. It opens up the range of languages you can use to write front-end functionality, with early focus on C, C++ and Rust, and it's also an LLVM compilation target. When run in the sandbox, it can interact with JavaScript and shares the same permissions and security model. When used with <a href=\"\"http://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">Firefox's new streaming compiler<span class=\"\"pop-out-icon\"\"></span></a>, it also results in faster page initialization. Although it's still early days, this W3C standard is definitely one to start exploring.</p>\""
    },
    {
        "name": "WebFlux",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"<p>Spring Framework 5, released over a year ago, embraces <a href=\"\"https://www.reactive-streams.org/\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\">reactive streams<span class=\"\"pop-out-icon\"\"></span></a>, a standard for asynchronous stream processing with non-blocking backpressure. The <a href=\"\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\"\" target=\"\"_blank\"\" aria-label=\"\"This is an external link. Opens in new window\"\" class=\"\"pop-out\"\"><strong>WebFlux</strong><span class=\"\"pop-out-icon\"\"></span></a> module introduces a reactive alternative to the traditional Spring MVC module for writing web applications in the Spring ecosystem. After working with it on a number of applications, our teams have come away impressed and report that the reactive (functional) approach improves code readability and system throughput. They do note, though, that adopting WebFlux requires a significant shift in thinking and recommend to factor this into the decision to choose WebFlux over Spring MVC.</p>\""
    }
]