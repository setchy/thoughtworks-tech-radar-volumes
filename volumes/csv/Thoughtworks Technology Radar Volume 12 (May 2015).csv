name,ring,quadrant,isNew,status,description
Consumer-driven contract testing,adopt,techniques,TRUE,new,""
Focus on mean time to recovery,adopt,techniques,FALSE,no change,"<p>Traditionally operations groups look to improve the mean time between failures. While avoiding failures is obviously still important, lessons from cloud computing have taught us to expect failure and instead to <strong>focus on mean time to recovery</strong>. Continuous Delivery automation makes rolling out rapid fixes easier and we are also seeing a growth in monitoring techniques to spot failures quickly through a ‘production immune system’. Teams are also successfully using semantic monitoring and synthetic transactions to exercise production systems in non-destructive ways. This combined focus allows teams to move rapidly with higher confidence, it can also reduce the emphasis on expensive test-execution in pre-production environments and is particularly important in responding to the ever-growing list of security vulnerabilities that are being discovered.</p>"
Generated infrastructure diagrams,adopt,techniques,TRUE,new,""
Structured logging,adopt,techniques,FALSE,no change,"<p>Treating logs as data gives us greater insight into the operational activity of the systems we build. <strong>Structured logging</strong> , which is using a consistent, predetermined message format containing semantic information, builds on this technique and enables tools such as Graylog2 and Splunk to yield deeper insights. We recommend adopting structured logging because the benefits outweigh the minimal effort involved and the practice is becoming the default standard.</p>"
Canary builds,trial,techniques,FALSE,no change,"<p>Many projects have external code dependencies, a large amount of which is provided by open source projects. In order to ensure our builds are reproducible, we integrate against known versions of them, but that can mean that it takes a while for us to integrate against newer versions of these libraries leading to a larger merge effort down the line. One approach we have seen to avoid this is to have a nightly <strong>Canary Build</strong> which tries to pull in the latest version of all dependencies. If the build is green, we know we can change which versions we depend on.</p>"
Datensparsamkeit,trial,techniques,FALSE,no change,"<p>The term <a href=""http://martinfowler.com/bliki/Datensparsamkeit.html"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Datensparsamkeit</strong><span class=""pop-out-icon""></span></a> is taken from German privacy legislation and describes the idea to only store as much personal information as is absolutely required for the business or applicable laws. Customer privacy continues to be a hot topic. Companies such as <a href=""http://www.washingtonpost.com/blogs/the-switch/wp/2014/12/01/is-ubers-rider-database-a-sitting-duck-for-hackers/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Uber are apparently collecting highly personal customer data, as well as being quite lax with security.<span class=""pop-out-icon""></span></a> This is a disaster waiting to happen. Following datensparsamkeit or using <a href=""https://en.wikipedia.org/wiki/De-identification"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">de-identification<span class=""pop-out-icon""></span></a> techniques even in jurisdictions where it is not legally mandated, can allow you to reduce the information you store. If you never store the information, you do not need to worry about someone stealing it.</p>"
Local storage sync,trial,techniques,FALSE,no change,"<p>When implementing single-page applications, sooner or later the question of offline use will come up. Given how hard it is to get this right when retrofitting an offline mode into an existing application, there is a trend towards implementing single-page applications with an “offline-first” mindset. An important implementation technique that we have used successfully is <strong>local storage sync</strong>. With this technique, the user facing code never makes requests to the backend. It retrieves data solely from local storage. A background worker synchronises the data in local storage with the backend systems, usually employing calls to some form of REST API.</p>"
NoPSD,trial,techniques,FALSE,no change,"<p><a href=""https://www.thoughtworks.com/p2magazine/issue02/continuous-design/""><strong>NoPSD</strong></a> is a movement to integrate design activities into the iterative feedback cycles required to build great software. The name aims to dislodge the PSD as the final canonical design artifact rather than taking a dig at the Adobe software. Instead of signing off on a pixel-perfect design specification at the start of a project, teams are urged to embrace Continuous Design: embedding designers into delivery teams, using lo-fi techniques for prototyping, and collaborating to refine the design in the target UI technology (normally HTML and CSS). This approach speeds responding to real user feedback, allows testing designs across multiple devices and form-factors, and embraces the dynamic nature of both digital products and the product creation process.</p>"
Offline first web applications,trial,techniques,TRUE,new,""
Products over projects,trial,techniques,TRUE,new,"<p>Most software development efforts are done using the mental model of a project, something that is planned, executed, and delivered within defined time-slots. Agile development challenged much of this model, replacing an up-front determination of requirements with an on-going discovery process that runs concurrently with development. Lean startup techniques, such as A/B testing of <a href=""http://martinfowler.com/bliki/ObservedRequirement.html"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">observed requirements<span class=""pop-out-icon""></span></a>, further erode this mindset. We consider that most software efforts should follow the lead of <a href=""https://info.thoughtworks.com/lean-enterprise-book.html"" target=""_blank"">Lean Enterprise</a> and consider themselves to be building products that support underlying business processes. Such products do not have a final delivery, rather an on-going process of exploring how best to support and optimize that business process which continues as long as the business is worthwhile. For these reasons we encourage organizations to think in terms of <strong>products rather than projects</strong>.</p>"
Threat modeling,trial,techniques,TRUE,new,"<p>At this point the vast majority of development teams are aware of the importance of writing secure software and dealing with their users’ data in a responsible way. They do face a steep learning curve and a vast number of potential threats, ranging from organized crime and government spying to teenagers who attack systems 'for the lulz'. <a href=""https://www.owasp.org/index.php/Category:Threat_Modeling"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Threat modeling</strong><span class=""pop-out-icon""></span></a>is a set of techniques, mostly from a defensive perspective, that help understand and classify potential threats. When turned into 'evil user stories' this can give a team a manageable and effective approach to making their systems more secure.</p>"
Accumulate-only data,assess,techniques,FALSE,no change,"<p>Immutable data structures are becoming more popular with functional languages such as Clojure providing immutability by default. Immutability allows code to be more easily written, read, and reasoned about. Using an <strong>append-only data store</strong> can confer some of these benefits in the database layer, as well as making audit and historical querying simple. Implementation options vary, from specific append-only data stores such as <a href=""http://www.datomic.com/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Datomic<span class=""pop-out-icon""></span></a> to simply using an “append-don’t-update” approach with a traditional database.</p>"
Blockchain beyond bitcoin,assess,techniques,FALSE,no change,"<p>While the currency aspect of Bitcoin and other cryptocurrencies gets most of the news, we are equally excited about possibilities for using the <strong>Blockchain beyond bitcoin</strong> and financial transactions. The Blockchain is a mechanism for verifying the contents of a shared ledger without relying on a centralized service. We already see the Blockchain (either the underlying technology or the public Bitcoin Blockchain) being used at the heart of systems as varied as identity, ownership, record-keeping, voting, cloud storage and even managing networks of smart devices. If you are building systems that require trust over decentralized networks, then the Blockchain is a technology worth assessing.</p>"
Data Lake,assess,techniques,FALSE,no change,"<p>An <strong>Enterprise Data Lake</strong> is an immutable data store of largely un-processed “raw” data, acting as a source for other processing streams but also made directly available to a significant number of internal, technical consumers using some efficient processing engine. Examples include HDFS or HBase within a Hadoop, Spark or Storm processing framework. We can contrast this with a typical system that collects raw data into some highly restricted space that is only made available to these consumers as the end result of a highly controlled ETL process.</p><br><br><p>Embracing the concept of the data lake is about eliminating bottlenecks due to lack of ETL developer staffing or excessive up front data model design. It is about empowering developers to create their own data processing pipelines in an agile fashion when they need it and how they need it—within reasonable limits—and so has much in common with another model that we think highly of, the DevOps model.</p>"
Flux,assess,techniques,TRUE,new,"<p><a href=""https://facebook.github.io/flux/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Flux</strong><span class=""pop-out-icon""></span></a> is an application architecture that Facebook has adopted for its web application development. Usually mentioned in conjunction with <strong>react.js</strong> , Flux is based on a one-way flow of data up through the rendering pipeline triggered by users or other external events modifying data stores. It’s been a while since we’ve seen any alternatives to the venerable model-view-* architectures and Flux embraces the modern web landscape of client-side JavaScript applications talking to multiple back-end services.</p>"
Git based CMS/Git for non-code,assess,techniques,TRUE,new,"<p>These days, most software developers are used to working with Git for source code control and collaboration. But Git can be used as a base mechanism for other circumstances where a group of people need to collaborate on textual documents (that can easily be merged). We’ve seen increasing amounts of projects use <a href=""http://git-scm.com/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Git</strong><span class=""pop-out-icon""></span></a> as the basis for a lightweight <strong>CMS</strong> , with text-based editing formats. Git has powerful features for tracking changes and exploring alternatives, with a distributed storage model that is fast in use and tolerant of networking issues. The biggest problem with wider adoption is that Git isn’t very easy to learn for non-programmers, but we expect to see more tools that build on top of the core Git plumbing. Such tools simplify the workflow for specific audiences, such as content authors. We would also welcome more tools to support diffing and merging for non-textual documents.</p>"
Phoenix Environments,assess,techniques,TRUE,new,"<p>The idea of <a href=""http://martinfowler.com/bliki/PhoenixServer.html"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">phoenix servers<span class=""pop-out-icon""></span></a> is now well established and has brought many benefits when applied to the right kinds of problems, but what about the environment we deploy these servers into? The concept of <strong>Phoenix Environments</strong> can help. We can use automation to allow us to create whole environments, including network configuration, load balancing and firewall ports, for example by using <strong>CloudFormation</strong> in AWS. We can then prove that the process works, by tearing the environments down and recreating them from scratch on a regular basis. Phoenix Environments can support provisioning new environments for testing, development, UAT and so on. They can also simplify the provision of a disaster recovery environment. As with Phoenix Servers this pattern is not always applicable and we need to think about carefully about things like state and dependencies. Treating the whole environment as a <a href=""http://martinfowler.com/bliki/BlueGreenDeployment.html"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">green/blue deployment<span class=""pop-out-icon""></span></a> can be one approach when environment reconfiguration needs to be done.</p>"
Reactive architectures,assess,techniques,TRUE,new,""
Long-lived branches with Gitflow,hold,techniques,FALSE,no change,"<p><strong>Gitflow</strong> is a strict branching pattern for releases using Git. Although not an inherently bad pattern, we often see it misused. If the feature and develop branches are short lived and merged often, you are really using the power of Git, which makes these activities easy. However, a problem we often see is that these become <strong>long lived branches</strong> , which results in the dreaded merge conflicts many people began using Git to escape. A merge is a merge. Regardless of the source control tool or pattern you use. If you wait more than a day or two to merge, you could hit a big merge conflict. This becomes a real issue if you have a larger team. If you have more than a few people waiting to merge, you can have a serious a bottleneck. Introducing patterns like Gitflow require the discipline to merge often to be successful. So by all means use the pattern, but only if you have the discipline to prevent long lived branches</p>"
Microservice envy,hold,techniques,FALSE,no change,""
Programming in your CI/CD tool,hold,techniques,FALSE,no change,""
SAFe™,hold,techniques,FALSE,no change,"<p>Scaling agile across enterprises is a continuing challenge. Several approaches have been proposed, with <strong>SAFe™</strong> being one gaining significant mindshare. While SAFe™ provides a useful checklist for areas of concern, they are easy to misuse, by introducing the same kind of large release tendencies like the release train and gated control processes that agile removes. Enterprises in particular look for a degree of commonality across endeavors that SAFe™ seems to provide, promoting aggressive standardization when some degree of customization provides significant value. Other lean approaches that include experimentation and incorporate continuous improvement practices like the Improvement Katas offer organizations a better model for scaling agile.</p><br><br><p>Scaled Agile Framework® and SAFe™ are trademarks of Scaled Agile, Inc.</p>"
Security sandwich,hold,techniques,FALSE,no change,"<p>Traditional approaches to security have relied on up-front specification followed by validation at the end. This <strong>“Security Sandwich”</strong> approach is hard to integrate into Agile teams, since much of the design happens throughout the process, and it does not leverage the automation opportunities provided by continuous delivery. Organizations should look at how they can inject security practices throughout the agile development cycle. This includes: evaluating the right level of Threat Modeling to do up-front; when to classify security concerns as their own stories, acceptance criteria, or cross-cutting non-functional requirements; including automatic static and dynamic security testing into your build pipeline; and how to include deeper testing, such as penetration testing, into releases in a continuous delivery model. In much the same way that DevOps has recast how historically adversarial groups can work together, the same is happening for security and development professionals. (But despite our dislike of the Security Sandwich model, it is much better than not considering security at all, which is sadly still a common circumstance.)</p>"
Separate DevOps team,hold,techniques,FALSE,no change,""
Apache Spark,trial,platforms,FALSE,moved in,""
Cloudera Impala,trial,platforms,TRUE,new,""
DigitalOcean,trial,platforms,FALSE,no change,"<p>We have been using <a href=""http://digitalocean.com"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>DigitalOcean</strong><span class=""pop-out-icon""></span></a> for basic compute infrastructure, and the service continues to impress us. If you need developer-friendly cloud infrastructure, it is worth a look.</p>"
TOTP Two-Factor Authentication,trial,platforms,FALSE,moved in,"<p>Passwords continue to be a poor mechanism for authenticating users and we’ve recently seen companies such as Yahoo! move to a “no passwords” solution—a one-time code is texted to your phone whenever you need to log in from a new browser. If you are still using passwords we recommend employing <strong>two-factor authentication</strong> which can significantly improve security. <a href=""http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Time-based One-Time Password<span class=""pop-out-icon""></span></a> ( <strong>TOTP</strong> ) is the standard algorithm in this space, with free smartphone authenticator apps from <a href=""https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Google<span class=""pop-out-icon""></span></a> and <a href=""http://www.windowsphone.com/en-us/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Microsoft<span class=""pop-out-icon""></span></a>.</p>"
.NET Core,assess,platforms,TRUE,new,""
Apache Kafka,assess,platforms,TRUE,new,""
Apache Kylin,assess,platforms,TRUE,new,""
Apache Mesos,assess,platforms,FALSE,no change,"<p><a href=""http://mesos.apache.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Mesos<span class=""pop-out-icon""></span></a> is a platform that abstracts out underlying computing resources to make it easier to build massively scalable distributed systems. It can be used to provide a scheduling layer for Docker, or to act as an abstraction layer to things like AWS. Twitter has used it to great effect to help them scale their infrastructure. Tools build on top of Mesos are starting to appear such as <a href=""http://nerds.airbnb.com/introducing-chronos/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Chronos<span class=""pop-out-icon""></span></a>, which is a distributed, fault tolerant cron replacement.</p>"
CoreOS,assess,platforms,FALSE,no change,"<p><strong>CoreOS</strong> is a Linux distribution designed to run large, scalable systems. All applications deployed on a CoreOS instance are run in separate Docker containers, and CoreOS provides a suite of tools to help manage them, including etcd their own distributed configuration store. Newer services, such as fleet, help cluster management by ensuring that a specific number of service instances are always kept running. FastPatch allows atomic CoreOS upgrades using an active-passive root partition scheme and helps with quick rollback in case of problems. These new developments make CoreOS well worth looking into if you are already comfortable with Docker.</p>"
Deis,assess,platforms,TRUE,new,""
H2O,assess,platforms,TRUE,new,"<p>Predictive analytics are used in more and more products, often directly in end-user facing functionality. <a href=""http://docs.0xdata.com/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>H2O</strong><span class=""pop-out-icon""></span></a> is an interesting new open source package (with a startup behind it) that makes predictive analytics accessible to project teams due to its easy-to-use user interface. At the same time it integrates with the data scientists’ favourite tools, R and Python, as well as Hadoop and Spark. It offers great performance and, in our experience, easy integration at runtime, especially on JVM-based platforms.</p>"
Jackrabbit Oak,assess,platforms,FALSE,no change,"<p><a href=""http://jackrabbit.apache.org/oak/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Jackrabbit Oak<span class=""pop-out-icon""></span></a>, formerly named Jackrabbit 3, is a scalable and performant implementation of hierarchical content repository for use as the foundation of content management system. In addition to file based storage solution, MongoDB and RDMS storage are also supported, and preferred in large volume use scenarios. Although implemented in Java, it can be easily accessed from various platforms via standards like JCR.</p>"
Linux Security Modules,assess,platforms,FALSE,no change,""
MariaDB,assess,platforms,FALSE,no change,"<p>After Oracle's acquisition of MySQL, more and more close sourced modules are bundled into its enterprise edition. There are concerns over the future of MySQL. <a href=""https://mariadb.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">MariaDB<span class=""pop-out-icon""></span></a> is a community-developed GPL-only fork of MySQL intended to remain truly open source, yet fully compatible and competitive with MySQL. High-profile adopters include large-scale internet organizations Google and Wikipedia, as well as key Linux distributors RedHat and SUSE.</p>"
Netflix OSS Full stack,assess,platforms,FALSE,no change,"<p>While we are reluctant to recommend wholesale adoption of the <strong>Netflix OSS Full Stack</strong> unless you happen to be entering the globally distributed video streaming business, the stack is chock full of interesting ideas, complete with open source implementations. Some of the tools, Asgard for example, are highly coupled into a virtually turnkey architecture, making them challenging to use individually. Other tools like Ice and Hystrix, which we featured on the radar previously, can be used stand-alone. We think teams should understand the ideas and approaches encapsulated within the tools even when they choose not to leverage the full stack.</p>"
OpenAM,assess,platforms,FALSE,no change,"<p>When Oracle ceased development on Sun’s OpenSSO—an open source access management platform—It was picked up by ForgeRock and integrated into their Open Identity Suite. Now named <strong><a href=""http://forgerock.com/products/open-identity-stack/openam/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">OpenAM<span class=""pop-out-icon""></span></a></strong>, it fills the niche for a scalable, open-source platform that supports OpenID Connect and SAML 2.0. However, OpenAM’s long history has resulted in a sprawling codebase whose documentation can be inscrutable. Hopefully, a slimmed-down alternative with better support for automated deployment and provisioning will emerge soon.</p>"
Particle Photon/Particle Electron,assess,platforms,TRUE,new,"<p><strong><a href=""https://www.spark.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Spark<span class=""pop-out-icon""></span></a></strong> is a full stack solution for cloud connected devices. <strong>Spark Photon</strong> is a microcontroller with wifi module. <strong>Spark Electron</strong> is a variant that connects to a cellular network. Spark OS adds REST API to the devices. This simplifies the entry to IoT and building your own connected devices.</p>"
SDN,assess,platforms,FALSE,no change,"<p>Software Defined Networking ( <strong>SDN</strong> ) is a broad topic, but is becoming ever more important. The ability to configure our networking devices using software is blurring the lines of where our application deployments end. It encompasses everything from virtual networking appliances like AWS’ Load Balancers or <a href=""https://github.com/coreos/flannel"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">CoreOS’ Flannel<span class=""pop-out-icon""></span></a>, to networking equipment that supports standards like <a href=""https://www.opennetworking.org/sdn-resources/openflow"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">OpenFlow<span class=""pop-out-icon""></span></a>. Where cloud providers have previously focused on compute and storage, we expect the growing array of SDN tools to deliver further efficiencies to how we handle our systems both off and on premise.</p>"
Text it as a service / Rapidpro.io,assess,platforms,FALSE,no change,"<p><strong>Text-it-as-a-service</strong> / <strong><a href=""http://rapidpro.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Rapidpro<span class=""pop-out-icon""></span></a></strong> offers ability to easily set up or modify complex short message service application for business without extensive need of a developer. With the lower costs of text messages compared to USSD sessions, this provides a more affordable way to build scalable applications targeting feature phones and we have seen success in our projects. Flows are very simple to build and actions can be triggered at any point such as sending an sms, email or even calling an external api.</p>"
Time series databases,assess,platforms,TRUE,new,""
U2F,assess,platforms,FALSE,no change,"<p>Securing online accounts is at the same time extremely important and notoriously difficult. Two-factor authentication does greatly increase security and we have recommended TOTP as a good solution. A new entrant in this field is Universal 2nd Factor ( <strong>U2F</strong> ), a solution based on public key cryptography and inexpensive USB hardware tokens. While developed at Google, it has now become a standard managed by the FIDO Alliance. We do like the promise of better protection against phishing and man-in-the-middle attacks, but are concerned because the standard currently references a specific elliptic curve digital signature algorithm that is considered to be flawed.</p>"
Application Servers,hold,platforms,TRUE,new,""
OSGi,hold,platforms,FALSE,no change,"<p><strong>OSGi</strong> (Open Service Gateway initiative) is a specification that aims to remedy the lack of a module system for Java, allowing for dynamic reloading of components. While some projects (notably Eclipse) use OSGi successfully, other uses have exposed the hazards of adding abstractions to platforms never designed for them. Projects that rely on OSGi to define a component system quickly realize that it solves only a small part of the overall problem, and often adds its own accidental complexity to projects such as more complex builds. Most projects now either use old-fashioned JAR files or microservice architectures to manage components, and await the native solution in Java in the Jigsaw module specification.</p>"
SPDY,hold,platforms,FALSE,moved out,""
Composer,adopt,tools,FALSE,moved in,""
GoCD,adopt,tools,FALSE,no change,"<p>Continuously delivering high quality software to production in a rapid and reliable manner requires coordinating many automated steps. <a href=""http://go.cd"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>GoCD</strong><span class=""pop-out-icon""></span></a> is an open-source tool built by ThoughtWorks to handle exactly this scenario, with the concept of deployment pipelines at its core, it handles complex workflows over many nodes and enables transparent, traceable promotion of trusted artifacts across environments. While it is possible to craft deployment pipelines on top of continuous integration tools, our teams see the benefit derived from a tool purpose built for this job.</p>"
Mountebank,adopt,tools,FALSE,moved in,""
Postman,adopt,tools,FALSE,moved in,""
Boot2docker,trial,tools,FALSE,no change,"<p><strong>Boot2docker</strong> is a lightweight linux distribution running Docker, packaged as a VM for OSX and Windows. This is a great way to get started experimenting with Docker. For teams using microservices, it can also be an effective way to run multiple services on a local machine for dev and test purposes, where the overhead of multiple vagrant VMs may be too much.</p>"
Brighter,trial,tools,TRUE,new,"<p><a href=""https://www.goparamore.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Brighter</strong><span class=""pop-out-icon""></span></a> is an open source library for .Net that provides scaffolding to implement Command Invocation. We have had good feedback from teams using it, especially in conjunction with the ports and adaptors pattern and <strong>CQRS</strong>. They especially like that it integrates well with <strong>Polly</strong> to provide circuit breaking functionality.</p>"
Consul,trial,tools,FALSE,moved in,""
Cursive,trial,tools,FALSE,no change,"<p><a href=""https://cursiveclojure.com/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Cursive<span class=""pop-out-icon""></span></a> is a Clojure IDE that works as a plugin for IntelliJ. While still in early access, we have found it very useful when working with larger Clojure codebases. Cursive provides strong renaming and navigation support, has shown itself to be stable and reliable, and is great for environments with mixed JVM languages. For organizations adopting Clojure, Cursive has helped lower the barrier to entry for existing developers.</p>"
GitLab,trial,tools,FALSE,no change,"<p><strong>GitLab</strong> is an on-premise Git repository hosting platform that gives proprietary software development teams the familiar and ubiquitous workflow that hosted version control services like GitHub and BitBucket provide OSS developers. While it is available as free community edition software, the commercial enterprise option provides support and deep integration with LDAP servers.</p>"
Hamms,trial,tools,TRUE,new,""
IndexedDB,trial,tools,FALSE,no change,""
Polly,trial,tools,TRUE,new,"<p>Several of our teams working on .Net projects have recommended <a href=""https://github.com/michael-wolfenden/Polly"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Polly</strong><span class=""pop-out-icon""></span></a> as being useful when building microservice based systems. It encourages the fluent expression of transient exception handling policies and the circuit breaker pattern including policies such as Retry, Retry Forever and Wait and Retry. Libraries already exist in other languages, Hystrix for Java for example, and Polly is a welcome addition from the .Net community.</p>"
REST-assured,trial,tools,TRUE,new,""
Swagger,trial,tools,FALSE,no change,"<p><strong><a href=""https://helloreverb.com/developers/swagger"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Swagger<span class=""pop-out-icon""></span></a></strong><a href=""https://helloreverb.com/developers/swagger"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>2.0</strong><span class=""pop-out-icon""></span></a> is a standard way to describe a RESTful API so that human-readable documentation and client examples can be generated automatically. The update to version 2.0 provides some significant flexibility enhancements and the list of tools for generating documentation continues to expand. There are also several alternatives to Swagger emerging from the vendor community, most significantly <a href=""http://raml.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">RAML<span class=""pop-out-icon""></span></a> and <a href=""http://apiblueprint.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">API Blueprint<span class=""pop-out-icon""></span></a>.</p>"
Xamarin,trial,tools,FALSE,no change,"<p>We are excited by the progress made by <strong>Xamarin</strong> in offering a solid choice for building cross-platform mobile apps. It supports C# and F# as the primary languages with bindings to platform specific SDKs and the Mono runtime environment that works across iOS, Android and Windows Phone. Applications are compiled to native code giving apps a more native look and feel. When using this toolset, it is imperative that the platform specific UI tier be separated from the rest of the tiers to ensure code reuse across different platforms. The recent open-sourcing of the .NET platform should be beneficial for <strong>Xamarin</strong> both in allowing access to a broader set of .NET tooling and also making development easier on other operating systems.</p>"
ZAP,trial,tools,TRUE,new,""
Blackbox,assess,tools,FALSE,no change,"<p><a href=""https://github.com/StackExchange/blackbox"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Blackbox</strong><span class=""pop-out-icon""></span></a> is a simple tool for encrypting specific files while at rest in your source repository. This is particularly useful if you need to store passwords or private keys. Blackbox works with Git, Mercurial and Subversion and uses GPG for the encryption. Each user has their own key, which makes it easy to revoke access on a granular level. There is a lot happening in this space and a few other players to consider including <strong>git-crypt</strong> and <strong>Trousseau</strong>.</p>"
Bokeh,assess,tools,TRUE,new,"<p>In the world of data science and analytics, much of the work is done using Python and R, languages which sadly offer few options for web-accessible plotting of visualizations. One approach is to convert the result of analysis into something that can be easily visualized and interacted with in the browser. We’re aware of two tools that are an attempt to do this. <a href=""http://bokeh.pydata.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Bokeh</strong><span class=""pop-out-icon""></span></a> is a Python and JavaScript library that allows you to create interactive visualizations “in the style of D3.js” but with high performance over large or streaming data sets. <a href=""http://trifacta.github.io/vega/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Vega</strong><span class=""pop-out-icon""></span></a> is a declarative visualization grammar for D3 that consumes server-generated JSON datasets and translates visualization descriptions into D3.js code.</p>"
Gor,assess,tools,TRUE,new,""
NaCl,assess,tools,TRUE,new,"<p>The <a href=""http://nacl.cr.yp.to/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>NaCl</strong><span class=""pop-out-icon""></span></a> library (pronounced 'Salt') provides a set of features for encryption, decryption, and signatures designed to make it easier to implement secure network communication or other cryptography requirements. Although these functions exist in other libraries, NaCl promises higher speed and easier to use APIs. Current support is for C and C++ with Python wrappers in progress.</p>"
Origami,assess,tools,TRUE,new,"<p><strong><a href=""https://facebook.github.io/origami/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Origami<span class=""pop-out-icon""></span></a></strong> is a free tool for designing user prototypes with a variety of keyboard shortcuts for common functions. It provides the possibility of exporting the prototypes as code snippets to Objective-C for iOS, Java for Android and JavaScript for Web. This tool can be used to rapidly build interactive user facing prototypes and testing user flows. We recommend investigating this tool if the use case fits from the experience we have gathered from several of our teams.</p>"
Packetbeat,assess,tools,FALSE,no change,"<p>As distributed systems become more complex, it can be useful to have tools that help you understand how your system is behaving in production. <a href=""https://www.elastic.co/beats/packetbeat"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Packetbeat<span class=""pop-out-icon""></span></a> is an open source tool which uses agents to sniff traffic between nodes, allowing you to see traffic patterns, error rates and other useful information. It requires <a href=""http://www.elasticsearch.org/overview/elasticsearch/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Elasticsearch<span class=""pop-out-icon""></span></a> and <a href=""http://www.elasticsearch.org/overview/kibana/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Kibana<span class=""pop-out-icon""></span></a> to work, but if you are already using these tools as part of log aggregation, it could be an easy drop-in to give you more insight into your production system.</p>"
pdfmake,assess,tools,TRUE,new,"<p><strong><a href=""https://github.com/bpampuch/pdfmake"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">pdfmake<span class=""pop-out-icon""></span></a></strong> is a JavaScript library which allows for creation and printing of PDF documents directly in the browser. To use pdfmake you construct a document object that supports structural elements such as tables, columns, and rich styling, then helper methods can create and print or download a PDF without leaving client-side JavaScript.</p>"
PlantUML,assess,tools,TRUE,new,"<p>Developing a software system by first creating a large number of detailed diagrams is an approach that, in our experience, does not compare favourably to the alternatives. However, describing a particularly complex and intricate part of the system with a diagram is usually a good idea, and the UML itself offers a number of useful and commonly understood diagrams. We like <a href=""http://plantuml.sourceforge.net/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>PlantUML</strong><span class=""pop-out-icon""></span></a>for creating these diagrams because it allows expressing the intent behind the diagrams in a clear textual form, without having to fiddle with overloaded graphical tools. Having a textual form also allows versioning and storage alongside the source code.</p>"
Prometheus,assess,tools,TRUE,new,"<p>SoundCloud have recently open sourced a Graphite replacement, <a href=""http://prometheus.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Prometheus</strong><span class=""pop-out-icon""></span></a>. Developed as a reaction to difficulties with <strong>Graphite</strong> in their production systems, Prometheus works differently to Graphite, by primarily supporting a pull-based HTTP model (although a more Graphite-like push model is also supported). It also goes beyond Graphite by being built to support alerting based on captured metrics, so it becomes a much more active part of your operational toolset. Some caution should be used in adopting new technology in the production monitoring space, but early reports are that SoundCloud are happy using it in production, and Docker are also contributing to ongoing development.</p>"
Quick,assess,tools,TRUE,new,""
Security Monkey,assess,tools,TRUE,new,""
Citrix for development,hold,tools,FALSE,no change,"<p>For security and compliance reasons, offshore teams are sometimes asked to use <strong>Citrix</strong> to connect to an onshore virtual desktop, where they do <strong>development</strong>. While a good tool for some use cases, Citrix provides an extremely poor remote development experience and often cripples an offshore team. There are many better technical solutions, such as the NoMachine remote desktop or Cloud9 IDE, which can provide a more workable experience. An even better solution is to tackle the underlying security and compliance concerns. Since you are trusting the remote team to work on your source code and check in to your code repository, you should try to get to a point where you also trust them to have source code on their machines. They will be much more productive!</p>"
Nancy,adopt,languages-and-frameworks,FALSE,moved in,""
Dashing,trial,languages-and-frameworks,FALSE,no change,"<p>The importance of big, visible displays in team areas has been written about many times before, and we certainly value the approach of helping everyone see and understand key pieces of information about how our software or our teams are doing. <a href=""http://dashing.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Dashing<span class=""pop-out-icon""></span></a> is a Ruby-based dashboard system we have been using for many years to create clear, visible displays optimized for large monitors. It is very hackable, allowing you to pull in information from a variety of sources from build systems, ticket or story tracking tools, or production monitoring systems.</p>"
Django REST,trial,languages-and-frameworks,FALSE,no change,"<p>We have used the <a href=""http://www.django-rest-framework.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Django REST framework<span class=""pop-out-icon""></span></a>, which is a flexible and customizable framework that makes it easy to build web APIs, in several of our projects. It allows you to build RESTful APIs in Python with Django, exposing API endpoints which are accessible from a consumer front-end. Django REST gives a browsable web API that allows developers to visualize data being transferred through the API and returns response examples, which the consumer application will receive. It provides a number of authentication schemes out of the box, and allows implementation of custom schemes.</p>"
Ionic Framework,trial,languages-and-frameworks,FALSE,no change,"<p><a href=""http://ionicframework.com/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Ionic framework<span class=""pop-out-icon""></span></a> is an open-source front-end framework that offers a library of mobile-optimized HTML, CSS and JavaScript components and tools for building highly interactive applications. It is built with SASS and optimized for AngularJS. We have seen success in several of our projects employing this framework, with its ease to install and test. We recommend investigating this framework when you are performance obsessed and looking for a seamlessly integrated front-end framework.</p>"
Nashorn,trial,languages-and-frameworks,FALSE,no change,"<p><strong>Nashorn</strong> is a new JavaScript engine for Java that has been released with Java 8. When the exact same code should be run in the web browser and on the server, which is often the case for validation and data migration logic, it is the tool of choice in the Java world, and that is the case despite some rough edges. We are not convinced that using Nashorn to host entire applications, via Node support or the Avatar project, is a good idea.</p>"
Om,trial,languages-and-frameworks,FALSE,no change,"<p>We have seen continued interest in <strong>Om</strong> , a ClojureScript wrapper around Facebook's ReactJS front-end programming framework. Om leverages the inherent immutability of ClojureScript, allowing automatic features like snapshots of UI state and undo. And due to the efficiency of ClojureScript's data structures, some Om applications run faster than identical ones based on the raw underlying React framework. The ecosystem of components and applications around Om is growing and our teams are starting to pick it up.</p>"
React.js,trial,languages-and-frameworks,FALSE,moved in,"<p>One benefit to the ongoing avalanche of front-end JavaScript frameworks is that occasionally, a new idea crops up that makes us think. <a href=""http://facebook.github.io/react/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>React.js</strong><span class=""pop-out-icon""></span></a> is a UI/View framework in which JavaScript functions generate HTML in a reactive data flow. We have seen several smaller projects achieve success with React.js and developers are drawn to its clean, composeable approach to componentization.</p>"
Retrofit,trial,languages-and-frameworks,FALSE,no change,"<p><a href=""http://square.github.io/retrofit/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Retrofit<span class=""pop-out-icon""></span></a> offers a reliable way to build HTTP clients on Android projects by converting a REST API into a Java interface. Retrofit integrates with OkHttp and allows developers to provide custom error handling for requests. It does JSON parsing automatically using Gson and has a very well supported community.</p>"
Spring Boot,trial,languages-and-frameworks,FALSE,moved in,"<p><a href=""http://projects.spring.io/spring-boot"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Spring Boot</strong><span class=""pop-out-icon""></span></a> allows easy set up of standalone Spring-based applications. It's ideal for pulling up new microservices and easy to deploy. It also makes data access less of a pain due to the hibernate mappings with much less boilerplate code. We like that Spring Boot simplifies Java services built with Spring, but have learned to be cautious of the many dependencies. Spring still lurks just beneath the surface.</p>"
Ember.js,assess,languages-and-frameworks,TRUE,new,""
Flight.js,assess,languages-and-frameworks,FALSE,no change,"<p>In the crowded space of JavaScript frameworks, we want to highlight <a href=""https://flightjs.github.io/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Flight.js</strong><span class=""pop-out-icon""></span></a> as a lightweight framework to build components. Flight gets by without much magic when adding behavior to DOM nodes. Its event-driven and component-based nature promotes writing decoupled code. This makes testing individual components comparatively easy. Care must be taken, however, when components need to interact with each other. There is little support for testing and a real danger to get into <em>event hell</em>. We do like that it uses functional mixins for behavior, like composition instead of inheritance.</p>"
Haskell Hadoop library,assess,languages-and-frameworks,FALSE,no change,"<p>While there are lots of fans of <strong>Haskell</strong> among ThoughtWorks' language devotees, we rarely see it on the kinds of projects we work on—until recently. Several open source projects now marry <strong>Hadoop</strong> ’s map/reduce jobs to Haskell’s syntax, which some developers and/or data scientists find appealing.</p>"
Lotus,assess,languages-and-frameworks,FALSE,no change,"<p>We don’t know who named <strong><a href=""http://lotusrb.org/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Lotus<span class=""pop-out-icon""></span></a></strong>, but we can only assume they are too young to have worked with a certain office collaboration product. Lotus is a new Rack-based MVC framework written in Ruby that can be deployed modularly so that you are free to use only the portions of the framework you need. It is a modern alternative to the monolithic Ruby-on-Rails framework (that turned 10 this year). Lotus has the potential to make full-stack Ruby MVC development as easy as 1-2-3.</p>"
Reagent,assess,languages-and-frameworks,FALSE,no change,"<p><a href=""http://holmsand.github.io/reagent/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out"">Reagent<span class=""pop-out-icon""></span></a> has emerged as a lightweight minimalist alternative to Om for wrapping React.js in ClojureScript. Whereas Om provides a comprehensive Clojure-idiomatic front-end programming framework, Reagent takes advantage of Clojure’s expressiveness to focus on simple components and a readable DSL for writing HTML. By representing HTML in Clojure data, Reagent retains the performance and understandability of React.js without embedding foreign markup in the code.</p>"
Swift,assess,languages-and-frameworks,FALSE,no change,"<p>With some real-world experience under our belt, <a href=""https://developer.apple.com/swift/"" target=""_blank"" aria-label=""This is an external link. Opens in new window"" class=""pop-out""><strong>Swift</strong><span class=""pop-out-icon""></span></a> still shows a lot of promise. Some of the problems, like long compile times, are being addressed. However, continued language changes cause extra development effort and make building older versions of your own software burdensome. Testing and refactoring also remain painful. On balance, though, you should still consider Swift when starting new development projects for the Apple ecosystem.</p>"
JSF,hold,languages-and-frameworks,FALSE,no change,"<p>We continue to see teams run into trouble using <strong>JSF</strong> - JavaServer Faces - and are recommending you avoid this technology. Teams seem to choose JSF because it is a Java EE standard without really evaluating whether the programming model suits them. We think JSF is flawed because its programming model encourages use of its own abstractions rather than fully embracing the underlying web model. JSF, like ASP.NET webforms, attempts to create stateful component trees on top HTML markup and the stateless HTTP protocol. The improvements in JSF 2.0 and 2.2, such as the introduction of stateless views and the promotion of GET, are steps in the right direction, maybe even an acknowledgement that the original model was flawed, but we feel this is a too little too late. Rather than dealing with the complexity of JSF we recommend teams use simple frameworks and work closely with web technologies including HTTP, HTML and CSS.</p>"