[
    {
        "name": "Automate database deployment",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"If the rate at which business is changing is an indicator of change in requirements, then the days of doing upfront database design are gone. Instead, projects should follow evolutionary database techniques and continue to change their database schemas as new requirements are implemented over the course of the project. Deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that application and database changes can be deployed automatically. Evolutionary database and automated database deployments ensure highly productive teams a path to continuous delivery.\""
    },
    {
        "name": "Coding architects",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "Continuous Delivery (CD)",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started.\""
    },
    {
        "name": "Data visualizations of development and operations",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"We have long advocated for both static and dynamic code analysis tools to help glean information about your code base. As the focus of software development broadens because of the Continuous Delivery movement, data visualizations of development and operations with effective, actionable profiling and monitoring should be part of your technical stack as well.\""
    },
    {
        "name": "DevOps",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Improving the interactions and relationship between development and IT operations gives us more effective delivery and production systems that are more stable and maintainable. Creating a DevOps culture requires attention to team organization, work practices, reporting lines, and incentives - leading to joint responsibility for faster and safer delivery. We recommend adopting DevOps because we cannot see any situation where attention in this area will not have a positive benefit.\""
    },
    {
        "name": "Emergent design",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Emergent design is one of the more advanced aspects of agile engineering practices, and therefore an area of active research & development. Such architectures should be driven by the underlying technical requirements of the system, rather than speculative planning for a future that may change. We have identified at least two facets of emergent design: the Lean software principle of last responsible moment, which mostly applies to greenfield projects, and finding & harvesting idiomatic patterns, which is more applicable to existing projects.\""
    },
    {
        "name": "Evolutionary architecture",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"We recommend adopting evolutionary architecture as an alternative to traditional up-front, heavy-weight enterprise architectural designs.\""
    },
    {
        "name": "Evolutionary database",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"If the rate at which business is changing is an indicator of change in requirements, then the days of doing upfront database design are gone. Instead, projects should follow evolutionary database techniques and continue to change their database schemas as new requirements are implemented over the course of the project. Deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that application and database changes can be deployed automatically. Evolutionary database and automated database deployments ensure highly productive teams a path to continuous delivery.\""
    },
    {
        "name": "Health check pages",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Simple performance trending",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Starting performance tests late in a project is risky and costly. Very simple performance tests that exercise key parts of the system, run on a regular basis, are good enough to track trends, so we can react if we see a change in performance. Run these tests with your build or as an overnight job and graph the results to create simple performance trending. Complex performance tests in a truly representative environment are still useful, but don’t wait for them to start understanding how the performance of your code is changing.\""
    },
    {
        "name": "Test at the appropriate level",
        "ring": "adopt",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"The advent of behavior-driven design (BDD) testing frameworks like Cucumber, combined with browser automation tools like Selenium, has encouraged widespread use of acceptance testing at the browser level. This unfortunately encouraged doing the bulk of testing where the cost to run the tests is the greatest. Instead, we should test at the appropriate level, as close to the code as possible, so that tests can be run with maximum efficiency. Browser-level tests should be the icing on the cake, supported by acceptance and unit tests executed at appropriate layers.\""
    },
    {
        "name": "Acceptance test of journeys",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Many teams focus acceptance testing at the story level, but this can lead to a large number of hard to maintain tests, and a focus on completing individual stories instead of coherent functionality needed to go live. A more holistic approach is to group user stories into journeys for which we create acceptance tests. Journeys through a system are a set of user interactions that provide value for both users and the business. At the outset a journey acceptance test will cover only one step, but as stories are completed the journey is expanded to encompass each stage in the user’s progress. Once the acceptance test of journeys passes, this tells us we have delivered real value.\""
    },
    {
        "name": "Agile analytics",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Build your own radar",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Building your own technology radar helps you decide, normalize, and publicize consensus technology views for all interested parties. Thoughtworks produces a technology radar for clients and friends, telling the world our opinions about upcoming technology trends. You should do this for your own company as well. Too many decisions in large companies happen in a vacuum, with no input from the technologists who have to live with them every day.\""
    },
    {
        "name": "Categorization & prioritization of technical debt",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Technical debt is a powerful and useful metaphor for dealing with the compromises we make when building software. Unfortunately it has become a catch-all term for many different kinds of issues and problems, leading to confusion and “devaluation” of the term. A very useful approach for dealing with this is catagorization of technical debt, assigning value and prioritizing debt payback in an analogous way to user stories. This helps the team focus on the most important areas and keeps issues transparent and measurable.\""
    },
    {
        "name": "Embedded servlet containers",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Embedding a servlet container, such as Jetty, inside a Java application has many advantages over running the application inside a container. Testing is relatively painless because of the simple startup, and the development environment is closer to production. Nasty surprises like mismatched versions of libraries or drivers are eliminated by not sharing across multiple applications. While you will have to manage and monitor multiple Java Virtual Machines in production using this model, we feel the advantages offered by the simplicity and isolation are significant.\""
    },
    {
        "name": "Event API’s",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"RESTful APIs have become standard in our industry. A good REST API provides a simple, lightweight means of building customizations and integrations. However, many of the quick, high value integrations we’d like to build require knowing when something happened. Consider building an event API, which, when used in conjunction with a REST API, facilitates simple workflow, notification, and synchronization integrations. These integrations often require no more than 20 or 30 lines of code. Often event APIs take the form of a “web hook” or callback mechanism, but don’t be afraid of using a poll-based Atom style either. An Atom event API scales cheaply and gives the client the power to guarantee delivery.\""
    },
    {
        "name": "Infrastructure automation of development workstations",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Out-of-container functional testing",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Performance testing as a first-class citizen",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Single command deploy",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"A key step in the Continuous Delivery process is the ability to release software arbitrarily close to when the business wants it. The ability to do single command deploy relies on a complete set of activities that fall under the umbrella of Continuous Delivery including extensive automation of everything from build/test to scripted environment provisioning and deployment. We have found that adopting this as a goal tends to drive the automation and testing pre-requisites upstream into the rest of your organization.\""
    },
    {
        "name": "Thoughtful caching",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"All too often caching is an afterthought used to address performance problems with a blanket approach and common cache lifetime. This leads to issues and workarounds. The “time value” of information is inherently linked to the business purpose and hence needs to be captured at the same time as other requirements. We believe thoughtful caching should be addressed early in the project and not just treated as a last minute performance fix.\""
    },
    {
        "name": "Windows infrastructure automation",
        "ring": "trial",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Event sourcing",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Event sourcing is an approach to thinking about persistent data where the primary record is a log of all events that make updates. A traditional representation of database state can be entirely recreated by reprocessing this event log. Event sourcing’s benefits include strong auditing, creation of historic state, and replaying of events for debugging and analysis. Event sourcing has been around for a while, but we think it is used much less than it should be.\""
    },
    {
        "name": "Experience Design (XD)",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Experience Design (XD) is an example of ways in which agility must evolve to accommodate real-world constraints. We are always interested in finding innovative ways to incorporate what have traditionally been up-front exercises into practices like Continuous Delivery. XD is a ripe field for study.\""
    },
    {
        "name": "Mechanical sympathy",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"There is a worrying trend that developers are becoming too distant from the hardware on which their code runs. Increasing virtualization and separation between development and operations makes this worse. In stark contrast some teams are writing code that leverages mechanical sympathy to get incredibly high performance from their software. The LMAX Disruptor is an open-source example in Java. For high performance cases like finance and Big data, getting closer to the metal can yield big returns.\""
    },
    {
        "name": "Microservices",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Microservices, often deployed out-of-container or using an embedded HTTP server, are a move away from traditional large technical services. This approach trades benefits such as maintainability for additional operational complexity. These drawbacks are typically addressed using infrastructure automation and continuous deployment techniques. On balance, microservices are an effective way of managing technical debt and handling different scaling characteristics especially when deployed in a service oriented architecture built around business capabilities.\""
    },
    {
        "name": "Production immune system",
        "ring": "assess",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Continuous Delivery techniques are shortening the “last mile” to get changes into production, allowing more frequent feature releases. A production immune system tracks changes as they are put into production, and automatically rolls back changes that have a negative effect on key metrics, such as revenue. Solid metrics, as well as automated A/B deployment, are required for this kind of aggressive rollback to be successful.\""
    },
    {
        "name": "Database based integration",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Feature branching",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Manual infrastructure management",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Despite advances in automation, many people fall back on manual infrastructure management. We often see problems caused by manual configuration of firewalls and load balancers, and especially by DBAs cutting and pasting SQL scripts to run against production databases. All of these activities, if not fully automated, should at least be scripted and repeatable across environments.\""
    },
    {
        "name": "Scrum certification",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Scrum was one of the founding approaches to Agile software development, and continues to provide a worthwhile core for the management side of software development. Scrum Certification schemes have proven counterproductive, granting only a veneer of competence, which often misleads teams into a distorted experience of agility.\""
    },
    {
        "name": "Server / application container end-of-life",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"A decade ago when memory was at a premium, application servers made a lot of sense. They were popular and useful as a mechanism to run and manage multiple applications on a shared server or cluster. These days applications are more often run on separate physical or virtual servers and the need for an application server is reduced. Consider evaluating server / application container end-of-life within your organization, and only use one if you benefit from the added complexity.\""
    },
    {
        "name": "Test recorders",
        "ring": "hold",
        "quadrant": "techniques",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "ATOM",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "AWS",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"While it can be all too easy to ignore geographical location of cloud-based services, for legal and technical reasons it can be a serious constraint when considering appropriate platforms. With the recently announced Brazil and Singapore regions, Amazon has made AWSbased systems more viable for people in areas previously poorly served by IaaS providers. In addition, they continue to add features to existing services, such as VPC. We remain confident in recommending AWS for those situations where flexibility in provisioning resources is key.\""
    },
    {
        "name": "Care about hardware",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "Communication between those responsible for hardware and software",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"One of the principal mechanisms that allows agile software development to work is feedback loops. One common yet expensive broken feedback loop we have observed is the lack of communication between those responsible for hardware and software. The end result creates cost but not worth. You must view architecture holistically; neither hardware nor software has a full enough perspective to be successful alone.\""
    },
    {
        "name": "KVM",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "Mobile web",
        "ring": "adopt",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Mobile web was in our trial ring on previous radars, but we’ve moved it into adopt in recognition of the fact we have created many mobile web applications. We believe this is the right way to create web content for mobile devices.\""
    },
    {
        "name": "AppHarbor",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"AppHarbor is a Platform as a Service (PaaS) offering for the .NET Platform using the same pricing model and structure pioneered by Heroku. It is a promising take on the deployment of .NET applications as it abstracts away most of the underlying configuration needs that come with the platform. It is maturing quickly and we expect it will see growing interest in time to come.\""
    },
    {
        "name": "Domain-specific PaaS",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Heroku",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Heroku is a beautifully simple Platform as a Service (PaaS). Although Heroku began as a Ruby on Rails platform, it is evolving to support a variety of languages and web frameworks, most recently Clojure. Heroku uses a standard stack and deploys applications with a simple Git push. Heroku’s recent acquisition by Salesforce.com has not diminished its service quality.\""
    },
    {
        "name": "Linux containers",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Offline mobile webapps (just HTML5)",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"HTML5 includes features that allow control and storage of offline data within the browser using client side JavaScript. These features allows creation of offline mobile web applications in a cross platform way that would have previously required installed applications. For instance an application that can download articles for reading later or a data capture application that can work offline and upload when you are online. While the standard is not finalized yet, support for these offline features is available and ready for use in the WebKit based browsers found on iOS, Android and newer Blackberry phones.\""
    },
    {
        "name": "Private Clouds",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Tablet",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Tablet devices provide a new model of computing. The next generation of tablets show the potential for new interaction paradigms, and we expect interest and innovation to continue to escalate.\""
    },
    {
        "name": "Ubiquitous computing",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Ubiquitous computing is tricky term as it covers many different ideas. What we find interesting and exciting at the moment is that both consumer and specialist mobile devices are increasingly based on commodity operating systems such as Android or iOS. This means that in many cases, software can be developed by organizations themselves, opening the door to innovative new applications without requiring expensive niche skills. Lower price points for the hardware also make this area more accessible, especially with peripherals like payment card readers, PIN key pads and high quality bar code scanners becoming available for both Android and iOS devices. When combined with features already available on these consumer devices, whole new ways of working open up.\""
    },
    {
        "name": "Windows Phone 7",
        "ring": "trial",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Windows Phone 7 has surprised even some of the long time critics of Windows platforms. After many failed attempts, Microsoft has managed not only to produce a mobile operating system that provides a user experience on par with the other major contenders in the space but also the development support to go with it. Microsoft is making Windows Phone 7 a viable competitor and another choice for a more integrated experience in the corporate arena. Whether it will be able to change adoption trends remains to be seen.\""
    },
    {
        "name": "Cloud Foundry",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Cloud Foundry is an open source Platform as a Service that can be deployed in your own data center or hosted by VMWare. At present Cloud Foundry supports Java/ Spring applications, Rails, Sinatra, Grails and Node.js. Additional services include MongoDB, MySQL and Redis. The platform seems to be enjoying active development with the recent addition of Scala and Lift support. Cloud Foundry is an interesting addition to the growing list of PaaS solutions. It is not clear what the relationship between vFabric and Cloud Foundry will be going forward.\""
    },
    {
        "name": "GPGPU",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"The use of GPUs for computing offers efficiencies and performance for certain classes of problems that would be prohibitively expensive for more traditional hardware. Problems that fit Single Instruction Multiple Data (SIMD) processing models can gain significant advantages at the cost of difficult learning curves using specialized APIs. OpenCL, CUDA from NVidia and DirectCompute from Microsoft offer developers access to General-purpose computing on graphics processing units (GPGPU).\""
    },
    {
        "name": "Hybrid clouds",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Hybrid clouds describe a set of patterns that combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods then use rented space in a public cloud for overflow capacity during peak traffic periods. Another way to combine public and private clouds in an agile way is to use the elasticity and malleability of public clouds for developing and understanding an application’s production characteristics, then moving it into permanent infrastructure in a private data center when it is stable.\""
    },
    {
        "name": "Node.js",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "OpenSocial",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"OpenSocial is a specification that provides a standard way to share content between semi-trusted applications. While initially proposed for public facing social networking sites, it has possibly more potential within the corporate firewall, where the benefits of being able to share data and content between applications in a standard manner frequently outweigh the requirements of scale and security.\""
    },
    {
        "name": "Single threaded servers with asynchronous I/O",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "vFabric",
        "ring": "assess",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"vFabric is a new Platform as a Service (PaaS) offering from VMWare. Based on enhanced versions of opensource web and messaging platforms Tomcat, Apache, and RabbitMQ, vFabric aims to deliver a Java based PaaS on a variety of cloud platforms. Currently supported platforms include VMForce, a collaboration between VMWare and force.com, Google App Engine and Amazon EC2. The addition of the GemFire in-memory distributed data management platform and Hyperic monitoring and management tool make vFabric an interesting set of technologies for Java developers looking to move to the cloud.\""
    },
    {
        "name": "Buying solutions you can only afford one of",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Many teams encounter problems that are caused by their test environment missing an expensive hardware component that is only present in production. While a pre-production environment in many cases cannot approach the scale of a production environment, all of its components should be present. We recommend not buying solutions you can only afford one of, such as SAN, firewalls or load balancers, as this prevents realistic testing anywhere but in production.\""
    },
    {
        "name": "GWT",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"GWT is a reasonable implementation of a poor architectural choice. GWT attempts to hide many of the details of the web as a platform by creating desktop metaphors in Java and generating JavaScript code to implement them. First, in many ways, JavaScript is more powerful and expressive than Java, so we suspect that the generation is going in the wrong direction. Secondly, it is impossible to hide a complex abstraction difference like that from event-driven desktop to stateless-web without leaky abstraction headaches eventually popping up. Third, it suffers from the same shortcomings of many elaborate frameworks, where building simple, aligned applications is quick and easy, building more sophisticated but not supported functionality is possible but difficult, and building the level of sophistication required by any non-trivial application becomes either impossible or so difficult it isn’t reasonable.\""
    },
    {
        "name": "Java portal servers",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "RIA",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"We have long been less than enthusiastic about RIA technologies such as Flash and Silverlight because of vendor lock in potential, anemic support for agile engineering practices, and potential for overuse. It seems even the large vendors are starting to agree with us. Now that modern versions of HTML handle most of the common cases that formerly required RIA, we feel that new projects must have enormous justification and careful strategic thought before using any of these technologies.\""
    },
    {
        "name": "Treating VMs like physical infrastructure",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"While virtualization is on the rise, some organizations are treating virtual machines like physical infrastructure. We frown on doing a full operating system install for each VM or using VMs for load testing. Virtual machines can be cloned, snapshotted, and manipulated in ways physical machines cannot, and also have vastly different performance characteristics than physical hardware. VMs should be used with full understanding of their benefits and limitations, otherwise you can really get into trouble with them.\""
    },
    {
        "name": "WS-*",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Zero-code packages",
        "ring": "hold",
        "quadrant": "platforms",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Git",
        "ring": "adopt",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Starting from a challenge posed to the Linux community to stop using commercial version control, Git has proved itself. Git embodies a well architected, high performance implementation of distributed version control. Git is powerful, so it should be used with respect, but that power enables agile engineering workflows that simply cannot exist with other tools. Git’s popularity is supported by the existence of GitHub. GitHub combines public and private Git repositories, social networking, and a host of other innovative tools and approaches.\""
    },
    {
        "name": "GitHub",
        "ring": "adopt",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Starting from a challenge posed to the Linux community to stop using commercial version control, Git has proved itself. Git embodies a well architected, high performance implementation of distributed version control. Git is powerful, so it should be used with respect, but that power enables agile engineering workflows that simply cannot exist with other tools. Git’s popularity is supported by the existence of GitHub. GitHub combines public and private Git repositories, social networking, and a host of other innovative tools and approaches.\""
    },
    {
        "name": "Infrastructure as code",
        "ring": "adopt",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Client-side MVC",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "FPM",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"There are many advantages to using OS-native packages to deploy components and dependencies, however the tools which build native packages for Linux are not trivial. FPM is a useful tool which makes it easy to create RPM, DEB, or Solaris packages with a minimum of fuss.\""
    },
    {
        "name": "Frank",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Jade",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "JavaScript micro frameworks",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "JavaScript tooling",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"JavaScript is now established as a powerful, mainstream language that can be used in a variety environments both on client and server sides. As JavaScript codebases expand, more JavaScript tooling support becomes necessary, especially in the continuous integration and testing spaces. Tools like Backbone.js, SpineJS, JavaScriptMVC, Jasmine, JSTestDriver and HRcov are coming to the forefront. They are created by a vibrant community that continues to grow.\""
    },
    {
        "name": "Log aggregation & indexing",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "Message buses without smarts",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"In contrast we have seen considerable success with Simple Message Buses where the integration problems are solved at the end points, rather than inside a vendor ESB system. The most well known Simple Message Bus approach is one based on the principles of REST and leveraging the proven scalability of the web. However organizations that have already invested in ESB infrastructure can leverage the useful parts of that infrastructure (reliable messaging etc) while still using a Simple Message Bus approach and performing integrations at the edges of the system.\""
    },
    {
        "name": "NuGet",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Polyglot Persistence",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "PowerShell",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Powershell is as important tool for managing Windows servers and applications. Built into Windows 2008 and Windows 7, Powershell allows Unix-like scripting and automation across a server farm. Scripts can be executed on remote machines, and a single command can manage hundreds of machines at once. Powershell scripts can deploy and configure applications and operating system components, and can be extended by writing .NET “commandlets.”\""
    },
    {
        "name": "PSake",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Vagrant",
        "ring": "trial",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"\""
    },
    {
        "name": "Gradle",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "jQuery Mobile",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Thoughtworks has used jQuery Mobile on two projects with mobile websites and had mixed experiences. One project found the library very useful for dealing with device differences and graceful degradation on older browsers. On this project we were working in a way that fit with the jQuery Mobile approach. Our other project found the tool less useful and felt to some extent it was trying to force them to work a particular way that did not fit their application well. For these reasons we have decided to leave this tool in assess. If you are doing mobile web it is definitely worth spiking but it may not fit every application.\""
    },
    {
        "name": "Logic-free markup",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Open source BI/ETL tools",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Open source BI tools such as Pentaho, JasperSoft, CloverETL, Talend, BIRT and SpagoBI are matching features with the proprietary tools and allowing for easy entry into the BI space. We recommend that you assess them.\""
    },
    {
        "name": "Riak",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Riak is a distributed key-value store that is schemaless and data-type agnostic. It can be put to good use in write heavy projects to store data such as sessions, shopping carts and streaming logs. The ability of the distributed cluster to self recover, distribute data across the cluster with tunable consistency and availability settings, do collision detection and resolve those if needed can be helpful in high availability environments and provide interesting solutions in the architecture.\""
    },
    {
        "name": "Sonar",
        "ring": "assess",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Measuring software internal quality is still a mystery, even though many source code metrics have been around for years. The problem with those metrics is they usually only capture one aspect of quality. We must consult many metrics to come to a conclusion about the overall quality of our code. Sonar is an integrated tool for checking, tracking and visualizing those metrics. It not only combines metrics together, but also mixes them with historical measures, giving us a better insight into the internal quality of the codebase.\""
    },
    {
        "name": "Code in configuration",
        "ring": "hold",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Many organizations try to minimize change in production IT environments. This frequently leads to behavioral anti-patterns. One example of this is over use of code in configuration to affect the behavior of production systems. Changes that really belong in code end up in configuration files which don’t necessarily pass through the same levels of testing as the application. Streamlining the path to production and focusing on quality simplifies rather than complicate things.\""
    },
    {
        "name": "Cross-platform mobile toolkits",
        "ring": "hold",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"With very few exceptions, tools that claimed to create seamless user experiences across Windows, Linux and OSX did not deliver. We ended up with compromised experiences on one or more of the operating systems. Mobile adds complexity to this problem with different hardware form factors and conventions for user interactions. We have made several attempts to use cross platform mobile toolkits on our projects with varying degrees of success. We saw issues like having to create a project for each platform or invoking specific native UI widgets to get things working. For these reasons we have put cross platform mobile toolkits in hold. While this may change in the future, we remain skeptical especially given past experiences on hardware that was far more homogeneous.\""
    },
    {
        "name": "ESB",
        "ring": "hold",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Maven",
        "ring": "hold",
        "quadrant": "tools",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "VCS with “implicit workflow”",
        "ring": "hold",
        "quadrant": "tools",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Care about languages",
        "ring": "adopt",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "HTML 5",
        "ring": "adopt",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"While HTML5 is an evolving standard, many elements have reached the stage where they can be safely used in production to create both on and offline mobile web applications. Based on our projects we think HTML5 is ready to be adopted for mobile web applications. As the standard continues to evolve we expect HTML5 will become an increasingly viable alternative to native applications with the distinct advantage of being inherently cross platform.\""
    },
    {
        "name": "JavaScript as a first class language",
        "ring": "adopt",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"Rich experiences delivered via the web to desktops, tablets and mobile devices rely heavily on JavaScript, and we continue to recommend treating JavaScript as a “first class” language within your application. Developers should carefully consider how they structure, test, refactor and maintain JavaScript code, applying the same rigor as they would with any other programming language.\""
    },
    {
        "name": "Clojure",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "moved in",
        "description": "\"\""
    },
    {
        "name": "CoffeeScript",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"JavaScript is a powerful, ubiquitous programming language with tricky and error prone syntax. Coffeescript fixes many of the warts of JavaScript in a clean, simple syntax that generates readable JavaScript. For example, creating true private variables in JavaScript is a syntactic nightmare; CoffeeScript generates the technically correct but hideous syntax. Some readers may be confused by our advocacy of Coffeescript given our general dislike for GWT, because on the surface they seem similar: tools that generate JavaScript. However, it is the level of abstraction that differs. GWT has an elaborate component model, which tries to hide details about the underlying language (JavaScript) and platform (the web). Coffeescript tries to make it easier to write proper JavaScript, avoiding pathological but default “features” of JavaScript, and does not build a layer that tries to insulate you from the platform.\""
    },
    {
        "name": "Domain-Specific Languages",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "SASS, SCSS, and LESS",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Scala",
        "ring": "trial",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "ClojureScript",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "F#",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    },
    {
        "name": "Functional Java",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"Functional programming continues its slow but steady ascent into developer mind share and, increasingly, code bases. New languages like Clojure, Scala, and F# offer great new features. Now libraries such as Functional Java, TotallyLazy and LambdaJ are back porting some functional language capabilities, particularly around higher-order functions and collections, into Java. We like this trend because it previews common capabilities of future languages yet allows developers to stay in their comfort zone.\""
    },
    {
        "name": "Future of Java",
        "ring": "assess",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.\""
    },
    {
        "name": "Google Dart",
        "ring": "hold",
        "quadrant": "languages-and-frameworks",
        "isNew": "TRUE",
        "status": "new",
        "description": "\"\""
    },
    {
        "name": "Logic in stored procedures",
        "ring": "hold",
        "quadrant": "languages-and-frameworks",
        "isNew": "FALSE",
        "status": "no change",
        "description": "\"\""
    }
]